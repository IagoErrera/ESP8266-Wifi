
WifiTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004744  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08004914  08004914  00005914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a84  08004a84  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a8c  08004a8c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a8c  08004a8c  00005a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a90  08004a90  00005a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004a94  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  2000005c  08004af0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08004af0  000066c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094d2  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a06  00000000  00000000  0000f55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  00010f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f2  00000000  00000000  00011720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002069a  00000000  00000000  00011d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a534  00000000  00000000  000323ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6cff  00000000  00000000  0003c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001035df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a4  00000000  00000000  00103624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001059c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080048fc 	.word	0x080048fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080048fc 	.word	0x080048fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <find_string>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int find_string(char* a, char* b, int start) {
 80005a0:	b480      	push	{r7}
 80005a2:	b089      	sub	sp, #36	@ 0x24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
	int i = start % MAX_BUFFER_SIZE, j;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a29      	ldr	r2, [pc, #164]	@ (8000654 <find_string+0xb4>)
 80005b0:	fb82 1203 	smull	r1, r2, r2, r3
 80005b4:	1151      	asrs	r1, r2, #5
 80005b6:	17da      	asrs	r2, r3, #31
 80005b8:	1a8a      	subs	r2, r1, r2
 80005ba:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80005be:	fb01 f202 	mul.w	r2, r1, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	61fb      	str	r3, [r7, #28]
	int end = (start + MAX_BUFFER_SIZE - 1) % MAX_BUFFER_SIZE;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80005cc:	4a21      	ldr	r2, [pc, #132]	@ (8000654 <find_string+0xb4>)
 80005ce:	fb82 1203 	smull	r1, r2, r2, r3
 80005d2:	1151      	asrs	r1, r2, #5
 80005d4:	17da      	asrs	r2, r3, #31
 80005d6:	1a8a      	subs	r2, r1, r2
 80005d8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80005dc:	fb01 f202 	mul.w	r2, r1, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	617b      	str	r3, [r7, #20]
	while (a[i] != '\0' && i != end) {
 80005e4:	e024      	b.n	8000630 <find_string+0x90>
		j = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
		while (1) {
			if (b[j] == '\0') return i;
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	4413      	add	r3, r2
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <find_string+0x5a>
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	e026      	b.n	8000648 <find_string+0xa8>
			if (a[i + j] != b[j]) break;
 80005fa:	69fa      	ldr	r2, [r7, #28]
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	4413      	add	r3, r2
 8000600:	461a      	mov	r2, r3
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	4413      	add	r3, r2
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	68b9      	ldr	r1, [r7, #8]
 800060c:	440b      	add	r3, r1
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	d103      	bne.n	800061c <find_string+0x7c>

			j++;
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	3301      	adds	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
			if (b[j] == '\0') return i;
 800061a:	e7e6      	b.n	80005ea <find_string+0x4a>
			if (a[i + j] != b[j]) break;
 800061c:	bf00      	nop
		}

		i++;
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3301      	adds	r3, #1
 8000622:	61fb      	str	r3, [r7, #28]
		if (i == MAX_BUFFER_SIZE) i = 0;
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800062a:	d101      	bne.n	8000630 <find_string+0x90>
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
	while (a[i] != '\0' && i != end) {
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d003      	beq.n	8000644 <find_string+0xa4>
 800063c:	69fa      	ldr	r2, [r7, #28]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	429a      	cmp	r2, r3
 8000642:	d1d0      	bne.n	80005e6 <find_string+0x46>
	}

	return -1;
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000648:	4618      	mov	r0, r3
 800064a:	3724      	adds	r7, #36	@ 0x24
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	10624dd3 	.word	0x10624dd3

08000658 <wait_ok>:

int wait_ok() {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	int found = -1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	607b      	str	r3, [r7, #4]
	while(found == -1) {
 8000664:	e01b      	b.n	800069e <wait_ok+0x46>
		found = find_string(r_data, "\r\nOK\r\n", buffer_start);
 8000666:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <wait_ok+0x5c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	4912      	ldr	r1, [pc, #72]	@ (80006b8 <wait_ok+0x60>)
 800066e:	4813      	ldr	r0, [pc, #76]	@ (80006bc <wait_ok+0x64>)
 8000670:	f7ff ff96 	bl	80005a0 <find_string>
 8000674:	6078      	str	r0, [r7, #4]
		if (found > 0) return found + 6;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	dd02      	ble.n	8000682 <wait_ok+0x2a>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3306      	adds	r3, #6
 8000680:	e013      	b.n	80006aa <wait_ok+0x52>

		found = find_string(r_data, "\r\nno change\r\n", buffer_start);
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <wait_ok+0x5c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	490d      	ldr	r1, [pc, #52]	@ (80006c0 <wait_ok+0x68>)
 800068a:	480c      	ldr	r0, [pc, #48]	@ (80006bc <wait_ok+0x64>)
 800068c:	f7ff ff88 	bl	80005a0 <find_string>
 8000690:	6078      	str	r0, [r7, #4]
		if (found > 0) return found + 13;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b00      	cmp	r3, #0
 8000696:	dd02      	ble.n	800069e <wait_ok+0x46>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	330d      	adds	r3, #13
 800069c:	e005      	b.n	80006aa <wait_ok+0x52>
	while(found == -1) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a4:	d0df      	beq.n	8000666 <wait_ok+0xe>
	}

	return -1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000056c 	.word	0x2000056c
 80006b8:	08004914 	.word	0x08004914
 80006bc:	20000180 	.word	0x20000180
 80006c0:	0800491c 	.word	0x0800491c

080006c4 <wait>:

int wait(char* str) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	int found = -1;
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	60fb      	str	r3, [r7, #12]

	while (found == -1) {
 80006d2:	e00c      	b.n	80006ee <wait+0x2a>
		found = find_string(r_data, str, buffer_start);
 80006d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <wait+0x40>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	480a      	ldr	r0, [pc, #40]	@ (8000708 <wait+0x44>)
 80006de:	f7ff ff5f 	bl	80005a0 <find_string>
 80006e2:	60f8      	str	r0, [r7, #12]
		if (found > 0) return found;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	dd01      	ble.n	80006ee <wait+0x2a>
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	e005      	b.n	80006fa <wait+0x36>
	while (found == -1) {
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f4:	d0ee      	beq.n	80006d4 <wait+0x10>
	}

	return -1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000056c 	.word	0x2000056c
 8000708:	20000180 	.word	0x20000180

0800070c <wifi_init>:

void wifi_init(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(wifi_rst_GPIO_Port, wifi_rst_Pin, 1);
 8000712:	2201      	movs	r2, #1
 8000714:	2102      	movs	r1, #2
 8000716:	484e      	ldr	r0, [pc, #312]	@ (8000850 <wifi_init+0x144>)
 8000718:	f001 fc5c 	bl	8001fd4 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800071c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000720:	f000 fd8c 	bl	800123c <HAL_Delay>

	HAL_UART_Receive_DMA(&huart1, (uint8_t*)r_data, MAX_BUFFER_SIZE);
 8000724:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000728:	494a      	ldr	r1, [pc, #296]	@ (8000854 <wifi_init+0x148>)
 800072a:	484b      	ldr	r0, [pc, #300]	@ (8000858 <wifi_init+0x14c>)
 800072c:	f002 fb2f 	bl	8002d8e <HAL_UART_Receive_DMA>

	n = sprintf(t_data, "AT\r\n");
 8000730:	494a      	ldr	r1, [pc, #296]	@ (800085c <wifi_init+0x150>)
 8000732:	484b      	ldr	r0, [pc, #300]	@ (8000860 <wifi_init+0x154>)
 8000734:	f003 fc42 	bl	8003fbc <siprintf>
 8000738:	4603      	mov	r3, r0
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b49      	ldr	r3, [pc, #292]	@ (8000864 <wifi_init+0x158>)
 800073e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)t_data, n, 100);
 8000740:	4b48      	ldr	r3, [pc, #288]	@ (8000864 <wifi_init+0x158>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	2364      	movs	r3, #100	@ 0x64
 8000748:	4945      	ldr	r1, [pc, #276]	@ (8000860 <wifi_init+0x154>)
 800074a:	4843      	ldr	r0, [pc, #268]	@ (8000858 <wifi_init+0x14c>)
 800074c:	f002 fa94 	bl	8002c78 <HAL_UART_Transmit>

	buffer_start = wait_ok();
 8000750:	f7ff ff82 	bl	8000658 <wait_ok>
 8000754:	4603      	mov	r3, r0
 8000756:	4a44      	ldr	r2, [pc, #272]	@ (8000868 <wifi_init+0x15c>)
 8000758:	6013      	str	r3, [r2, #0]

	status = 1;
 800075a:	4b44      	ldr	r3, [pc, #272]	@ (800086c <wifi_init+0x160>)
 800075c:	2201      	movs	r2, #1
 800075e:	601a      	str	r2, [r3, #0]

	n = sprintf(t_data, "AT+CWMODE=3\r\n");
 8000760:	4943      	ldr	r1, [pc, #268]	@ (8000870 <wifi_init+0x164>)
 8000762:	483f      	ldr	r0, [pc, #252]	@ (8000860 <wifi_init+0x154>)
 8000764:	f003 fc2a 	bl	8003fbc <siprintf>
 8000768:	4603      	mov	r3, r0
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b3d      	ldr	r3, [pc, #244]	@ (8000864 <wifi_init+0x158>)
 800076e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)t_data, n, 100);
 8000770:	4b3c      	ldr	r3, [pc, #240]	@ (8000864 <wifi_init+0x158>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	2364      	movs	r3, #100	@ 0x64
 8000778:	4939      	ldr	r1, [pc, #228]	@ (8000860 <wifi_init+0x154>)
 800077a:	4837      	ldr	r0, [pc, #220]	@ (8000858 <wifi_init+0x14c>)
 800077c:	f002 fa7c 	bl	8002c78 <HAL_UART_Transmit>

	buffer_start = wait_ok();
 8000780:	f7ff ff6a 	bl	8000658 <wait_ok>
 8000784:	4603      	mov	r3, r0
 8000786:	4a38      	ldr	r2, [pc, #224]	@ (8000868 <wifi_init+0x15c>)
 8000788:	6013      	str	r3, [r2, #0]

	status = 2;
 800078a:	4b38      	ldr	r3, [pc, #224]	@ (800086c <wifi_init+0x160>)
 800078c:	2202      	movs	r2, #2
 800078e:	601a      	str	r2, [r3, #0]

	n = sprintf(t_data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWORD);
 8000790:	4b38      	ldr	r3, [pc, #224]	@ (8000874 <wifi_init+0x168>)
 8000792:	4a39      	ldr	r2, [pc, #228]	@ (8000878 <wifi_init+0x16c>)
 8000794:	4939      	ldr	r1, [pc, #228]	@ (800087c <wifi_init+0x170>)
 8000796:	4832      	ldr	r0, [pc, #200]	@ (8000860 <wifi_init+0x154>)
 8000798:	f003 fc10 	bl	8003fbc <siprintf>
 800079c:	4603      	mov	r3, r0
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b30      	ldr	r3, [pc, #192]	@ (8000864 <wifi_init+0x158>)
 80007a2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)t_data, n, 100);
 80007a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000864 <wifi_init+0x158>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	2364      	movs	r3, #100	@ 0x64
 80007ac:	492c      	ldr	r1, [pc, #176]	@ (8000860 <wifi_init+0x154>)
 80007ae:	482a      	ldr	r0, [pc, #168]	@ (8000858 <wifi_init+0x14c>)
 80007b0:	f002 fa62 	bl	8002c78 <HAL_UART_Transmit>

	buffer_start = wait_ok();
 80007b4:	f7ff ff50 	bl	8000658 <wait_ok>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000868 <wifi_init+0x15c>)
 80007bc:	6013      	str	r3, [r2, #0]

	status = 3;
 80007be:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <wifi_init+0x160>)
 80007c0:	2203      	movs	r2, #3
 80007c2:	601a      	str	r2, [r3, #0]

	n = sprintf(t_data, "AT+CIPMUX=1\r\n");
 80007c4:	492e      	ldr	r1, [pc, #184]	@ (8000880 <wifi_init+0x174>)
 80007c6:	4826      	ldr	r0, [pc, #152]	@ (8000860 <wifi_init+0x154>)
 80007c8:	f003 fbf8 	bl	8003fbc <siprintf>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <wifi_init+0x158>)
 80007d2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)t_data, n, 100);
 80007d4:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <wifi_init+0x158>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	2364      	movs	r3, #100	@ 0x64
 80007dc:	4920      	ldr	r1, [pc, #128]	@ (8000860 <wifi_init+0x154>)
 80007de:	481e      	ldr	r0, [pc, #120]	@ (8000858 <wifi_init+0x14c>)
 80007e0:	f002 fa4a 	bl	8002c78 <HAL_UART_Transmit>

	buffer_start = wait_ok();
 80007e4:	f7ff ff38 	bl	8000658 <wait_ok>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000868 <wifi_init+0x15c>)
 80007ec:	6013      	str	r3, [r2, #0]

	status = 4;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <wifi_init+0x160>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	601a      	str	r2, [r3, #0]

	n = sprintf(t_data, "AT+CIPSERVER=1,%d\r\n", PORT);
 80007f4:	2250      	movs	r2, #80	@ 0x50
 80007f6:	4923      	ldr	r1, [pc, #140]	@ (8000884 <wifi_init+0x178>)
 80007f8:	4819      	ldr	r0, [pc, #100]	@ (8000860 <wifi_init+0x154>)
 80007fa:	f003 fbdf 	bl	8003fbc <siprintf>
 80007fe:	4603      	mov	r3, r0
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <wifi_init+0x158>)
 8000804:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)t_data, n, 100);
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <wifi_init+0x158>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	2364      	movs	r3, #100	@ 0x64
 800080e:	4914      	ldr	r1, [pc, #80]	@ (8000860 <wifi_init+0x154>)
 8000810:	4811      	ldr	r0, [pc, #68]	@ (8000858 <wifi_init+0x14c>)
 8000812:	f002 fa31 	bl	8002c78 <HAL_UART_Transmit>

	buffer_start = wait_ok();
 8000816:	f7ff ff1f 	bl	8000658 <wait_ok>
 800081a:	4603      	mov	r3, r0
 800081c:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <wifi_init+0x15c>)
 800081e:	6013      	str	r3, [r2, #0]

	status = 5;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <wifi_init+0x160>)
 8000822:	2205      	movs	r2, #5
 8000824:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < MAX_BUFFER_SIZE; i++) r_data[i] = '\0';
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	e007      	b.n	800083c <wifi_init+0x130>
 800082c:	4a09      	ldr	r2, [pc, #36]	@ (8000854 <wifi_init+0x148>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3301      	adds	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000842:	dbf3      	blt.n	800082c <wifi_init+0x120>
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40020000 	.word	0x40020000
 8000854:	20000180 	.word	0x20000180
 8000858:	20000078 	.word	0x20000078
 800085c:	0800492c 	.word	0x0800492c
 8000860:	20000374 	.word	0x20000374
 8000864:	20000568 	.word	0x20000568
 8000868:	2000056c 	.word	0x2000056c
 800086c:	20000570 	.word	0x20000570
 8000870:	08004934 	.word	0x08004934
 8000874:	08004944 	.word	0x08004944
 8000878:	08004950 	.word	0x08004950
 800087c:	08004958 	.word	0x08004958
 8000880:	08004970 	.word	0x08004970
 8000884:	08004980 	.word	0x08004980

08000888 <handle_request>:

// Request -> Link\r\n\r\n+IPD,<channel>,<length>;<Request>\r\n<RequesterInfo>\r\n<Status>\r\n[...]
uint8_t handle_request(int* channel, int* length) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
	int found = find_string(r_data,"+IPD", buffer_start);
 8000892:	4b52      	ldr	r3, [pc, #328]	@ (80009dc <handle_request+0x154>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	4951      	ldr	r1, [pc, #324]	@ (80009e0 <handle_request+0x158>)
 800089a:	4852      	ldr	r0, [pc, #328]	@ (80009e4 <handle_request+0x15c>)
 800089c:	f7ff fe80 	bl	80005a0 <find_string>
 80008a0:	60f8      	str	r0, [r7, #12]
	if (found == -1) return 0;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a8:	d101      	bne.n	80008ae <handle_request+0x26>
 80008aa:	2300      	movs	r3, #0
 80008ac:	e092      	b.n	80009d4 <handle_request+0x14c>

	HAL_Delay(50);
 80008ae:	2032      	movs	r0, #50	@ 0x32
 80008b0:	f000 fcc4 	bl	800123c <HAL_Delay>
	buffer_start = (found + 5) % MAX_BUFFER_SIZE;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	1d5a      	adds	r2, r3, #5
 80008b8:	4b4b      	ldr	r3, [pc, #300]	@ (80009e8 <handle_request+0x160>)
 80008ba:	fb83 1302 	smull	r1, r3, r3, r2
 80008be:	1159      	asrs	r1, r3, #5
 80008c0:	17d3      	asrs	r3, r2, #31
 80008c2:	1acb      	subs	r3, r1, r3
 80008c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80008c8:	fb01 f303 	mul.w	r3, r1, r3
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	4a43      	ldr	r2, [pc, #268]	@ (80009dc <handle_request+0x154>)
 80008d0:	6013      	str	r3, [r2, #0]

	(*channel) = 0;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
	while (r_data[buffer_start] != ',') {
 80008d8:	e021      	b.n	800091e <handle_request+0x96>
		(*channel) = (*channel) * 10 + r_data[buffer_start++] - 48;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4618      	mov	r0, r3
 80008e8:	4b3c      	ldr	r3, [pc, #240]	@ (80009dc <handle_request+0x154>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	493b      	ldr	r1, [pc, #236]	@ (80009dc <handle_request+0x154>)
 80008f0:	600a      	str	r2, [r1, #0]
 80008f2:	4a3c      	ldr	r2, [pc, #240]	@ (80009e4 <handle_request+0x15c>)
 80008f4:	5cd3      	ldrb	r3, [r2, r3]
 80008f6:	4403      	add	r3, r0
 80008f8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	601a      	str	r2, [r3, #0]
		buffer_start = buffer_start % MAX_BUFFER_SIZE;
 8000900:	4b36      	ldr	r3, [pc, #216]	@ (80009dc <handle_request+0x154>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b38      	ldr	r3, [pc, #224]	@ (80009e8 <handle_request+0x160>)
 8000906:	fb83 1302 	smull	r1, r3, r3, r2
 800090a:	1159      	asrs	r1, r3, #5
 800090c:	17d3      	asrs	r3, r2, #31
 800090e:	1acb      	subs	r3, r1, r3
 8000910:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000914:	fb01 f303 	mul.w	r3, r1, r3
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	4a30      	ldr	r2, [pc, #192]	@ (80009dc <handle_request+0x154>)
 800091c:	6013      	str	r3, [r2, #0]
	while (r_data[buffer_start] != ',') {
 800091e:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <handle_request+0x154>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a30      	ldr	r2, [pc, #192]	@ (80009e4 <handle_request+0x15c>)
 8000924:	5cd3      	ldrb	r3, [r2, r3]
 8000926:	2b2c      	cmp	r3, #44	@ 0x2c
 8000928:	d1d7      	bne.n	80008da <handle_request+0x52>
	}
	buffer_start++; buffer_start = buffer_start % MAX_BUFFER_SIZE;
 800092a:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <handle_request+0x154>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	4a2a      	ldr	r2, [pc, #168]	@ (80009dc <handle_request+0x154>)
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <handle_request+0x154>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b2b      	ldr	r3, [pc, #172]	@ (80009e8 <handle_request+0x160>)
 800093a:	fb83 1302 	smull	r1, r3, r3, r2
 800093e:	1159      	asrs	r1, r3, #5
 8000940:	17d3      	asrs	r3, r2, #31
 8000942:	1acb      	subs	r3, r1, r3
 8000944:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000948:	fb01 f303 	mul.w	r3, r1, r3
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	4a23      	ldr	r2, [pc, #140]	@ (80009dc <handle_request+0x154>)
 8000950:	6013      	str	r3, [r2, #0]

	(*length) = 0;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
	while (r_data[buffer_start] != ':') {
 8000958:	e021      	b.n	800099e <handle_request+0x116>
		(*length) = (*length) * 10 + r_data[buffer_start++] - 48;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4618      	mov	r0, r3
 8000968:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <handle_request+0x154>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	491b      	ldr	r1, [pc, #108]	@ (80009dc <handle_request+0x154>)
 8000970:	600a      	str	r2, [r1, #0]
 8000972:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <handle_request+0x15c>)
 8000974:	5cd3      	ldrb	r3, [r2, r3]
 8000976:	4403      	add	r3, r0
 8000978:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	601a      	str	r2, [r3, #0]
		buffer_start = buffer_start % MAX_BUFFER_SIZE;
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <handle_request+0x154>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <handle_request+0x160>)
 8000986:	fb83 1302 	smull	r1, r3, r3, r2
 800098a:	1159      	asrs	r1, r3, #5
 800098c:	17d3      	asrs	r3, r2, #31
 800098e:	1acb      	subs	r3, r1, r3
 8000990:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000994:	fb01 f303 	mul.w	r3, r1, r3
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <handle_request+0x154>)
 800099c:	6013      	str	r3, [r2, #0]
	while (r_data[buffer_start] != ':') {
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <handle_request+0x154>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a10      	ldr	r2, [pc, #64]	@ (80009e4 <handle_request+0x15c>)
 80009a4:	5cd3      	ldrb	r3, [r2, r3]
 80009a6:	2b3a      	cmp	r3, #58	@ 0x3a
 80009a8:	d1d7      	bne.n	800095a <handle_request+0xd2>
	}
	buffer_start++; buffer_start = buffer_start % MAX_BUFFER_SIZE;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <handle_request+0x154>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <handle_request+0x154>)
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <handle_request+0x154>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <handle_request+0x160>)
 80009ba:	fb83 1302 	smull	r1, r3, r3, r2
 80009be:	1159      	asrs	r1, r3, #5
 80009c0:	17d3      	asrs	r3, r2, #31
 80009c2:	1acb      	subs	r3, r1, r3
 80009c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80009c8:	fb01 f303 	mul.w	r3, r1, r3
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	4a03      	ldr	r2, [pc, #12]	@ (80009dc <handle_request+0x154>)
 80009d0:	6013      	str	r3, [r2, #0]

	return 1;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000056c 	.word	0x2000056c
 80009e0:	08004994 	.word	0x08004994
 80009e4:	20000180 	.word	0x20000180
 80009e8:	10624dd3 	.word	0x10624dd3

080009ec <handle_route>:

uint8_t handle_route(char* end_point, int n, int channel, char* response, int rn) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b090      	sub	sp, #64	@ 0x40
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	603b      	str	r3, [r7, #0]
	int found = -1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	if ((found = find_string(r_data, end_point, buffer_start)) == -1) return 0;
 8000a00:	4b38      	ldr	r3, [pc, #224]	@ (8000ae4 <handle_route+0xf8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	68f9      	ldr	r1, [r7, #12]
 8000a08:	4837      	ldr	r0, [pc, #220]	@ (8000ae8 <handle_route+0xfc>)
 8000a0a:	f7ff fdc9 	bl	80005a0 <find_string>
 8000a0e:	63b8      	str	r0, [r7, #56]	@ 0x38
 8000a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a16:	d101      	bne.n	8000a1c <handle_route+0x30>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e05f      	b.n	8000adc <handle_route+0xf0>
	buffer_start = (found + n + 11) % MAX_BUFFER_SIZE;
 8000a1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	4413      	add	r3, r2
 8000a22:	f103 020b 	add.w	r2, r3, #11
 8000a26:	4b31      	ldr	r3, [pc, #196]	@ (8000aec <handle_route+0x100>)
 8000a28:	fb83 1302 	smull	r1, r3, r3, r2
 8000a2c:	1159      	asrs	r1, r3, #5
 8000a2e:	17d3      	asrs	r3, r2, #31
 8000a30:	1acb      	subs	r3, r1, r3
 8000a32:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000a36:	fb01 f303 	mul.w	r3, r1, r3
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	4a29      	ldr	r2, [pc, #164]	@ (8000ae4 <handle_route+0xf8>)
 8000a3e:	6013      	str	r3, [r2, #0]

	char data[32];
	int size = sprintf(data, "AT+CIPSEND=%d,%d\r\n", channel, rn);
 8000a40:	f107 0014 	add.w	r0, r7, #20
 8000a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	4929      	ldr	r1, [pc, #164]	@ (8000af0 <handle_route+0x104>)
 8000a4a:	f003 fab7 	bl	8003fbc <siprintf>
 8000a4e:	6378      	str	r0, [r7, #52]	@ 0x34

	HAL_UART_Transmit(&huart1, data, size, 100);
 8000a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	f107 0114 	add.w	r1, r7, #20
 8000a58:	2364      	movs	r3, #100	@ 0x64
 8000a5a:	4826      	ldr	r0, [pc, #152]	@ (8000af4 <handle_route+0x108>)
 8000a5c:	f002 f90c 	bl	8002c78 <HAL_UART_Transmit>

	found = wait(">");
 8000a60:	4825      	ldr	r0, [pc, #148]	@ (8000af8 <handle_route+0x10c>)
 8000a62:	f7ff fe2f 	bl	80006c4 <wait>
 8000a66:	63b8      	str	r0, [r7, #56]	@ 0x38
	buffer_start = (found + 2) % MAX_BUFFER_SIZE;
 8000a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a6a:	1c9a      	adds	r2, r3, #2
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <handle_route+0x100>)
 8000a6e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a72:	1159      	asrs	r1, r3, #5
 8000a74:	17d3      	asrs	r3, r2, #31
 8000a76:	1acb      	subs	r3, r1, r3
 8000a78:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000a7c:	fb01 f303 	mul.w	r3, r1, r3
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	4a18      	ldr	r2, [pc, #96]	@ (8000ae4 <handle_route+0xf8>)
 8000a84:	6013      	str	r3, [r2, #0]

	HAL_UART_Transmit(&huart1, response, rn, 100);
 8000a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	2364      	movs	r3, #100	@ 0x64
 8000a8c:	6839      	ldr	r1, [r7, #0]
 8000a8e:	4819      	ldr	r0, [pc, #100]	@ (8000af4 <handle_route+0x108>)
 8000a90:	f002 f8f2 	bl	8002c78 <HAL_UART_Transmit>

	found = wait("\r\nSEND OK\r\n");
 8000a94:	4819      	ldr	r0, [pc, #100]	@ (8000afc <handle_route+0x110>)
 8000a96:	f7ff fe15 	bl	80006c4 <wait>
 8000a9a:	63b8      	str	r0, [r7, #56]	@ 0x38

	buffer_start = (found + 11) % MAX_BUFFER_SIZE;
 8000a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a9e:	f103 020b 	add.w	r2, r3, #11
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <handle_route+0x100>)
 8000aa4:	fb83 1302 	smull	r1, r3, r3, r2
 8000aa8:	1159      	asrs	r1, r3, #5
 8000aaa:	17d3      	asrs	r3, r2, #31
 8000aac:	1acb      	subs	r3, r1, r3
 8000aae:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000ab2:	fb01 f303 	mul.w	r3, r1, r3
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <handle_route+0xf8>)
 8000aba:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < MAX_BUFFER_SIZE; i++) r_data[i] = '\0';
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ac0:	e007      	b.n	8000ad2 <handle_route+0xe6>
 8000ac2:	4a09      	ldr	r2, [pc, #36]	@ (8000ae8 <handle_route+0xfc>)
 8000ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ac6:	4413      	add	r3, r2
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ace:	3301      	adds	r3, #1
 8000ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ad4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ad8:	dbf3      	blt.n	8000ac2 <handle_route+0xd6>

	return 1;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3740      	adds	r7, #64	@ 0x40
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000056c 	.word	0x2000056c
 8000ae8:	20000180 	.word	0x20000180
 8000aec:	10624dd3 	.word	0x10624dd3
 8000af0:	0800499c 	.word	0x0800499c
 8000af4:	20000078 	.word	0x20000078
 8000af8:	080049b0 	.word	0x080049b0
 8000afc:	080049b4 	.word	0x080049b4

08000b00 <handle_command>:

void handle_command(char* command, int length, void* handler(void*), void* param) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
 8000b0c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < length; i++) if (command[i] != r_data[buffer_start + i]) return;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	e00e      	b.n	8000b32 <handle_command+0x32>
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <handle_command+0x4c>)
 8000b1e:	6819      	ldr	r1, [r3, #0]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	440b      	add	r3, r1
 8000b24:	490a      	ldr	r1, [pc, #40]	@ (8000b50 <handle_command+0x50>)
 8000b26:	5ccb      	ldrb	r3, [r1, r3]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d10a      	bne.n	8000b42 <handle_command+0x42>
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	dbec      	blt.n	8000b14 <handle_command+0x14>

	(handler)(param);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6838      	ldr	r0, [r7, #0]
 8000b3e:	4798      	blx	r3
 8000b40:	e000      	b.n	8000b44 <handle_command+0x44>
	for (int i = 0; i < length; i++) if (command[i] != r_data[buffer_start + i]) return;
 8000b42:	bf00      	nop
}
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000056c 	.word	0x2000056c
 8000b50:	20000180 	.word	0x20000180

08000b54 <handle_led_on>:

void* handle_led_on(void* param) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2120      	movs	r1, #32
 8000b60:	4803      	ldr	r0, [pc, #12]	@ (8000b70 <handle_led_on+0x1c>)
 8000b62:	f001 fa37 	bl	8001fd4 <HAL_GPIO_WritePin>

	return NULL;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40020000 	.word	0x40020000

08000b74 <handle_led_off>:

void* handle_led_off(void* param) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2120      	movs	r1, #32
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <handle_led_off+0x1c>)
 8000b82:	f001 fa27 	bl	8001fd4 <HAL_GPIO_WritePin>

	return NULL;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40020000 	.word	0x40020000

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0c6      	sub	sp, #280	@ 0x118
 8000b98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9a:	f000 fadd 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9e:	f000 f845 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba2:	f000 f903 	bl	8000dac <MX_GPIO_Init>
  MX_DMA_Init();
 8000ba6:	f000 f8d9 	bl	8000d5c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000baa:	f000 f8ad 	bl	8000d08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	wifi_init();
 8000bae:	f7ff fdad 	bl	800070c <wifi_init>
	int data_len;

//	data_len = sprintf(data_response, "AT+CIFSR\r\n");
//	HAL_UART_Transmit(&huart1, data_response, data_len, 100);

	data_len = sprintf(data_response, RESPONSE);
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	4917      	ldr	r1, [pc, #92]	@ (8000c14 <main+0x80>)
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 f9ff 	bl	8003fbc <siprintf>
 8000bbe:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	int channel, length, found;
	while (1){
		found = -1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
//			handle_request(&channel, &length);
//			handle_route("GET /test", 9, channel, data_response, data_len);
//		}

//		if ((found = wait("GET /test")) == -1) continue;
		if (handle_request(&channel, &length)) {
 8000bca:	463a      	mov	r2, r7
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fe59 	bl	8000888 <handle_request>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0f2      	beq.n	8000bc2 <main+0x2e>
			handle_route("GET /test", 9, channel, data_response, data_len);
 8000bdc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000be0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	f107 0108 	add.w	r1, r7, #8
 8000bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	2109      	movs	r1, #9
 8000bf4:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <main+0x84>)
 8000bf6:	f7ff fef9 	bl	80009ec <handle_route>
			handle_command("LED ON", 6, handle_led_on, NULL);
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	4a07      	ldr	r2, [pc, #28]	@ (8000c1c <main+0x88>)
 8000bfe:	2106      	movs	r1, #6
 8000c00:	4807      	ldr	r0, [pc, #28]	@ (8000c20 <main+0x8c>)
 8000c02:	f7ff ff7d 	bl	8000b00 <handle_command>
			handle_command("LED OFF", 7, handle_led_off, NULL);
 8000c06:	2300      	movs	r3, #0
 8000c08:	4a06      	ldr	r2, [pc, #24]	@ (8000c24 <main+0x90>)
 8000c0a:	2107      	movs	r1, #7
 8000c0c:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <main+0x94>)
 8000c0e:	f7ff ff77 	bl	8000b00 <handle_command>
		found = -1;
 8000c12:	e7d6      	b.n	8000bc2 <main+0x2e>
 8000c14:	080049c0 	.word	0x080049c0
 8000c18:	08004a14 	.word	0x08004a14
 8000c1c:	08000b55 	.word	0x08000b55
 8000c20:	08004a20 	.word	0x08004a20
 8000c24:	08000b75 	.word	0x08000b75
 8000c28:	08004a28 	.word	0x08004a28

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b094      	sub	sp, #80	@ 0x50
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	2234      	movs	r2, #52	@ 0x34
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 f9de 	bl	8003ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <SystemClock_Config+0xd4>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c58:	4a29      	ldr	r2, [pc, #164]	@ (8000d00 <SystemClock_Config+0xd4>)
 8000c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c60:	4b27      	ldr	r3, [pc, #156]	@ (8000d00 <SystemClock_Config+0xd4>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	4b24      	ldr	r3, [pc, #144]	@ (8000d04 <SystemClock_Config+0xd8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c78:	4a22      	ldr	r2, [pc, #136]	@ (8000d04 <SystemClock_Config+0xd8>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <SystemClock_Config+0xd8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c94:	2310      	movs	r3, #16
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ca4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ca8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000caa:	2304      	movs	r3, #4
 8000cac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fcee 	bl	800269c <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cc6:	f000 f8a3 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cca:	230f      	movs	r3, #15
 8000ccc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 f98e 	bl	8002008 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cf2:	f000 f88d 	bl	8000e10 <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3750      	adds	r7, #80	@ 0x50
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40007000 	.word	0x40007000

08000d08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <MX_USART1_UART_Init+0x50>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d40:	f001 ff4a 	bl	8002bd8 <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d4a:	f000 f861 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000078 	.word	0x20000078
 8000d58:	40011000 	.word	0x40011000

08000d5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <MX_DMA_Init+0x4c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000da8 <MX_DMA_Init+0x4c>)
 8000d6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <MX_DMA_Init+0x4c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	203a      	movs	r0, #58	@ 0x3a
 8000d84:	f000 fb59 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d88:	203a      	movs	r0, #58	@ 0x3a
 8000d8a:	f000 fb72 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	2046      	movs	r0, #70	@ 0x46
 8000d94:	f000 fb51 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000d98:	2046      	movs	r0, #70	@ 0x46
 8000d9a:	f000 fb6a 	bl	8001472 <HAL_NVIC_EnableIRQ>

}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <MX_GPIO_Init+0x5c>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e08 <MX_GPIO_Init+0x5c>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <MX_GPIO_Init+0x5c>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, wifi_rst_Pin|LED_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2122      	movs	r1, #34	@ 0x22
 8000de0:	480a      	ldr	r0, [pc, #40]	@ (8000e0c <MX_GPIO_Init+0x60>)
 8000de2:	f001 f8f7 	bl	8001fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : wifi_rst_Pin LED_Pin */
  GPIO_InitStruct.Pin = wifi_rst_Pin|LED_Pin;
 8000de6:	2322      	movs	r3, #34	@ 0x22
 8000de8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <MX_GPIO_Init+0x60>)
 8000dfc:	f000 ff56 	bl	8001cac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <Error_Handler+0x8>

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f000 fae2 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a4c      	ldr	r2, [pc, #304]	@ (8000fbc <HAL_UART_MspInit+0x150>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 8092 	bne.w	8000fb4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc0 <HAL_UART_MspInit+0x154>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e98:	4a49      	ldr	r2, [pc, #292]	@ (8000fc0 <HAL_UART_MspInit+0x154>)
 8000e9a:	f043 0310 	orr.w	r3, r3, #16
 8000e9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea0:	4b47      	ldr	r3, [pc, #284]	@ (8000fc0 <HAL_UART_MspInit+0x154>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4b43      	ldr	r3, [pc, #268]	@ (8000fc0 <HAL_UART_MspInit+0x154>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	4a42      	ldr	r2, [pc, #264]	@ (8000fc0 <HAL_UART_MspInit+0x154>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebc:	4b40      	ldr	r3, [pc, #256]	@ (8000fc0 <HAL_UART_MspInit+0x154>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ec8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eda:	2307      	movs	r3, #7
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4837      	ldr	r0, [pc, #220]	@ (8000fc4 <HAL_UART_MspInit+0x158>)
 8000ee6:	f000 fee1 	bl	8001cac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000eea:	4b37      	ldr	r3, [pc, #220]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000eec:	4a37      	ldr	r2, [pc, #220]	@ (8000fcc <HAL_UART_MspInit+0x160>)
 8000eee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000ef0:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000ef2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ef6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef8:	4b33      	ldr	r3, [pc, #204]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efe:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f04:	4b30      	ldr	r3, [pc, #192]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000f06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f12:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f18:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000f1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f1e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f20:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f26:	4b28      	ldr	r3, [pc, #160]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f2c:	4826      	ldr	r0, [pc, #152]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000f2e:	f000 fabb 	bl	80014a8 <HAL_DMA_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000f38:	f7ff ff6a 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a22      	ldr	r2, [pc, #136]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000f40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f42:	4a21      	ldr	r2, [pc, #132]	@ (8000fc8 <HAL_UART_MspInit+0x15c>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000f48:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f4a:	4a22      	ldr	r2, [pc, #136]	@ (8000fd4 <HAL_UART_MspInit+0x168>)
 8000f4c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f50:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f54:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f58:	2240      	movs	r2, #64	@ 0x40
 8000f5a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f68:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f70:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f88:	4811      	ldr	r0, [pc, #68]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f8a:	f000 fa8d 	bl	80014a8 <HAL_DMA_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8000f94:	f7ff ff3c 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000f9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd0 <HAL_UART_MspInit+0x164>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2025      	movs	r0, #37	@ 0x25
 8000faa:	f000 fa46 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fae:	2025      	movs	r0, #37	@ 0x25
 8000fb0:	f000 fa5f 	bl	8001472 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	@ 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	200000c0 	.word	0x200000c0
 8000fcc:	40026440 	.word	0x40026440
 8000fd0:	20000120 	.word	0x20000120
 8000fd4:	400264b8 	.word	0x400264b8

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <NMI_Handler+0x4>

08000fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <MemManage_Handler+0x4>

08000ff0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <UsageFault_Handler+0x4>

08001000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102e:	f000 f8e5 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <USART1_IRQHandler+0x10>)
 800103e:	f001 fecb 	bl	8002dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000078 	.word	0x20000078

0800104c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <DMA2_Stream2_IRQHandler+0x10>)
 8001052:	f000 fbc1 	bl	80017d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000c0 	.word	0x200000c0

08001060 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <DMA2_Stream7_IRQHandler+0x10>)
 8001066:	f000 fbb7 	bl	80017d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000120 	.word	0x20000120

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f002 ffb2 	bl	800400c <__errno>
 80010a8:	4603      	mov	r3, r0
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20020000 	.word	0x20020000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	20000574 	.word	0x20000574
 80010dc:	200006c8 	.word	0x200006c8

080010e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <SystemInit+0x20>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <SystemInit+0x20>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800113c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001108:	f7ff ffea 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	@ (8001140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	@ (8001144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	@ (8001150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001132:	f002 ff71 	bl	8004018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fd2d 	bl	8000b94 <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800113c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001148:	08004a94 	.word	0x08004a94
  ldr r2, =_sbss
 800114c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001150:	200006c4 	.word	0x200006c4

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <HAL_Init+0x40>)
 8001162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <HAL_Init+0x40>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <HAL_Init+0x40>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f94f 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fe46 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f967 	bl	800148e <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 f92f 	bl	800143a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	@ (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	20000578 	.word	0x20000578

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000578 	.word	0x20000578

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4907      	ldr	r1, [pc, #28]	@ (8001320 <__NVIC_EnableIRQ+0x38>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	@ (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	@ (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff29 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff3e 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff8e 	bl	8001378 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff31 	bl	80012e8 <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa2 	bl	80013e0 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff feb6 	bl	8001224 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e099      	b.n	80015f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e4:	e00f      	b.n	8001506 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014e6:	f7ff fe9d 	bl	8001224 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d908      	bls.n	8001506 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2220      	movs	r2, #32
 80014f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2203      	movs	r2, #3
 80014fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e078      	b.n	80015f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e8      	bne.n	80014e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <HAL_DMA_Init+0x158>)
 8001520:	4013      	ands	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001532:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4313      	orrs	r3, r2
 8001556:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155c:	2b04      	cmp	r3, #4
 800155e:	d107      	bne.n	8001570 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	4313      	orrs	r3, r2
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4313      	orrs	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f023 0307 	bic.w	r3, r3, #7
 8001586:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	4313      	orrs	r3, r2
 8001590:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	2b04      	cmp	r3, #4
 8001598:	d117      	bne.n	80015ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00e      	beq.n	80015ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 fb01 	bl	8001bb4 <DMA_CheckFifoParam>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2240      	movs	r2, #64	@ 0x40
 80015bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80015c6:	2301      	movs	r3, #1
 80015c8:	e016      	b.n	80015f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fab8 	bl	8001b48 <DMA_CalcBaseAndBitshift>
 80015d8:	4603      	mov	r3, r0
 80015da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e0:	223f      	movs	r2, #63	@ 0x3f
 80015e2:	409a      	lsls	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	f010803f 	.word	0xf010803f

08001604 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_DMA_Start_IT+0x26>
 8001626:	2302      	movs	r3, #2
 8001628:	e040      	b.n	80016ac <HAL_DMA_Start_IT+0xa8>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b01      	cmp	r3, #1
 800163c:	d12f      	bne.n	800169e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2202      	movs	r2, #2
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 fa4a 	bl	8001aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165c:	223f      	movs	r2, #63	@ 0x3f
 800165e:	409a      	lsls	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0216 	orr.w	r2, r2, #22
 8001672:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0208 	orr.w	r2, r2, #8
 800168a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e005      	b.n	80016aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016a6:	2302      	movs	r3, #2
 80016a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016c2:	f7ff fdaf 	bl	8001224 <HAL_GetTick>
 80016c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d008      	beq.n	80016e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2280      	movs	r2, #128	@ 0x80
 80016d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e052      	b.n	800178c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0216 	bic.w	r2, r2, #22
 80016f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001704:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <HAL_DMA_Abort+0x62>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0208 	bic.w	r2, r2, #8
 8001724:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001736:	e013      	b.n	8001760 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001738:	f7ff fd74 	bl	8001224 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b05      	cmp	r3, #5
 8001744:	d90c      	bls.n	8001760 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2220      	movs	r2, #32
 800174a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2203      	movs	r2, #3
 8001750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e015      	b.n	800178c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1e4      	bne.n	8001738 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	223f      	movs	r2, #63	@ 0x3f
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d004      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2280      	movs	r2, #128	@ 0x80
 80017ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00c      	b.n	80017cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2205      	movs	r2, #5
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0201 	bic.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001a20 <HAL_DMA_IRQHandler+0x248>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001a24 <HAL_DMA_IRQHandler+0x24c>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	0a9b      	lsrs	r3, r3, #10
 80017f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001802:	2208      	movs	r2, #8
 8001804:	409a      	lsls	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01a      	beq.n	8001844 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0204 	bic.w	r2, r2, #4
 800182a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001830:	2208      	movs	r2, #8
 8001832:	409a      	lsls	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001848:	2201      	movs	r2, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d012      	beq.n	800187a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001866:	2201      	movs	r2, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001872:	f043 0202 	orr.w	r2, r3, #2
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187e:	2204      	movs	r2, #4
 8001880:	409a      	lsls	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d012      	beq.n	80018b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00b      	beq.n	80018b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189c:	2204      	movs	r2, #4
 800189e:	409a      	lsls	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a8:	f043 0204 	orr.w	r2, r3, #4
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b4:	2210      	movs	r2, #16
 80018b6:	409a      	lsls	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d043      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d03c      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d2:	2210      	movs	r2, #16
 80018d4:	409a      	lsls	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d018      	beq.n	800191a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d108      	bne.n	8001908 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d024      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
 8001906:	e01f      	b.n	8001948 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01b      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
 8001918:	e016      	b.n	8001948 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d107      	bne.n	8001938 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0208 	bic.w	r2, r2, #8
 8001936:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194c:	2220      	movs	r2, #32
 800194e:	409a      	lsls	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 808f 	beq.w	8001a78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8087 	beq.w	8001a78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196e:	2220      	movs	r2, #32
 8001970:	409a      	lsls	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b05      	cmp	r3, #5
 8001980:	d136      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0216 	bic.w	r2, r2, #22
 8001990:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d103      	bne.n	80019b2 <HAL_DMA_IRQHandler+0x1da>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0208 	bic.w	r2, r2, #8
 80019c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c6:	223f      	movs	r2, #63	@ 0x3f
 80019c8:	409a      	lsls	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d07e      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
        }
        return;
 80019ee:	e079      	b.n	8001ae4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d01d      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10d      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d031      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4798      	blx	r3
 8001a1c:	e02c      	b.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
 8001a1e:	bf00      	nop
 8001a20:	20000000 	.word	0x20000000
 8001a24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d023      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
 8001a38:	e01e      	b.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10f      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0210 	bic.w	r2, r2, #16
 8001a56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d032      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d022      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2205      	movs	r2, #5
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d307      	bcc.n	8001ac0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f2      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x2cc>
 8001abe:	e000      	b.n	8001ac2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ac0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
 8001ae2:	e000      	b.n	8001ae6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ae4:	bf00      	nop
    }
  }
}
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b40      	cmp	r3, #64	@ 0x40
 8001b18:	d108      	bne.n	8001b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b2a:	e007      	b.n	8001b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3b10      	subs	r3, #16
 8001b58:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <DMA_CalcBaseAndBitshift+0x64>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b62:	4a13      	ldr	r2, [pc, #76]	@ (8001bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d909      	bls.n	8001b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b7e:	f023 0303 	bic.w	r3, r3, #3
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b88:	e007      	b.n	8001b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b92:	f023 0303 	bic.w	r3, r3, #3
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	aaaaaaab 	.word	0xaaaaaaab
 8001bb0:	08004a48 	.word	0x08004a48

08001bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d11f      	bne.n	8001c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d856      	bhi.n	8001c82 <DMA_CheckFifoParam+0xce>
 8001bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bdc <DMA_CheckFifoParam+0x28>)
 8001bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bda:	bf00      	nop
 8001bdc:	08001bed 	.word	0x08001bed
 8001be0:	08001bff 	.word	0x08001bff
 8001be4:	08001bed 	.word	0x08001bed
 8001be8:	08001c83 	.word	0x08001c83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d046      	beq.n	8001c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bfc:	e043      	b.n	8001c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c06:	d140      	bne.n	8001c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c0c:	e03d      	b.n	8001c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c16:	d121      	bne.n	8001c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d837      	bhi.n	8001c8e <DMA_CheckFifoParam+0xda>
 8001c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c24 <DMA_CheckFifoParam+0x70>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c35 	.word	0x08001c35
 8001c28:	08001c3b 	.word	0x08001c3b
 8001c2c:	08001c35 	.word	0x08001c35
 8001c30:	08001c4d 	.word	0x08001c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
      break;
 8001c38:	e030      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d025      	beq.n	8001c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c4a:	e022      	b.n	8001c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c54:	d11f      	bne.n	8001c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c5a:	e01c      	b.n	8001c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d903      	bls.n	8001c6a <DMA_CheckFifoParam+0xb6>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d003      	beq.n	8001c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c68:	e018      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6e:	e015      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00e      	beq.n	8001c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c80:	e00b      	b.n	8001c9a <DMA_CheckFifoParam+0xe6>
      break;
 8001c82:	bf00      	nop
 8001c84:	e00a      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c86:	bf00      	nop
 8001c88:	e008      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c8a:	bf00      	nop
 8001c8c:	e006      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c8e:	bf00      	nop
 8001c90:	e004      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c92:	bf00      	nop
 8001c94:	e002      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c96:	bf00      	nop
 8001c98:	e000      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	e165      	b.n	8001f94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	f040 8154 	bne.w	8001f8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d005      	beq.n	8001cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d130      	bne.n	8001d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	2203      	movs	r2, #3
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 0201 	and.w	r2, r3, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d017      	beq.n	8001d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d123      	bne.n	8001df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	08da      	lsrs	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3208      	adds	r2, #8
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80ae 	beq.w	8001f8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b5d      	ldr	r3, [pc, #372]	@ (8001fac <HAL_GPIO_Init+0x300>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	4a5c      	ldr	r2, [pc, #368]	@ (8001fac <HAL_GPIO_Init+0x300>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e42:	4b5a      	ldr	r3, [pc, #360]	@ (8001fac <HAL_GPIO_Init+0x300>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4e:	4a58      	ldr	r2, [pc, #352]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4f      	ldr	r2, [pc, #316]	@ (8001fb4 <HAL_GPIO_Init+0x308>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d025      	beq.n	8001ec6 <HAL_GPIO_Init+0x21a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001fb8 <HAL_GPIO_Init+0x30c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_GPIO_Init+0x216>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4d      	ldr	r2, [pc, #308]	@ (8001fbc <HAL_GPIO_Init+0x310>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d019      	beq.n	8001ebe <HAL_GPIO_Init+0x212>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc0 <HAL_GPIO_Init+0x314>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0x20e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4b      	ldr	r2, [pc, #300]	@ (8001fc4 <HAL_GPIO_Init+0x318>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <HAL_GPIO_Init+0x20a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001fc8 <HAL_GPIO_Init+0x31c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x206>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a49      	ldr	r2, [pc, #292]	@ (8001fcc <HAL_GPIO_Init+0x320>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_GPIO_Init+0x202>
 8001eaa:	2306      	movs	r3, #6
 8001eac:	e00c      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eae:	2307      	movs	r3, #7
 8001eb0:	e00a      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	e008      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e004      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	f002 0203 	and.w	r2, r2, #3
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed8:	4935      	ldr	r1, [pc, #212]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd0 <HAL_GPIO_Init+0x324>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f0a:	4a31      	ldr	r2, [pc, #196]	@ (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f10:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f34:	4a26      	ldr	r2, [pc, #152]	@ (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f3a:	4b25      	ldr	r3, [pc, #148]	@ (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f64:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f88:	4a11      	ldr	r2, [pc, #68]	@ (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3301      	adds	r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	f67f ae96 	bls.w	8001cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3724      	adds	r7, #36	@ 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020c00 	.word	0x40020c00
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40021400 	.word	0x40021400
 8001fcc:	40021800 	.word	0x40021800
 8001fd0:	40013c00 	.word	0x40013c00

08001fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe4:	787b      	ldrb	r3, [r7, #1]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ff0:	e003      	b.n	8001ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ff2:	887b      	ldrh	r3, [r7, #2]
 8001ff4:	041a      	lsls	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	619a      	str	r2, [r3, #24]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0cc      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b68      	ldr	r3, [pc, #416]	@ (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d90c      	bls.n	8002044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b65      	ldr	r3, [pc, #404]	@ (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b63      	ldr	r3, [pc, #396]	@ (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0b8      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800205c:	4b59      	ldr	r3, [pc, #356]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a58      	ldr	r2, [pc, #352]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002066:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002074:	4b53      	ldr	r3, [pc, #332]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a52      	ldr	r2, [pc, #328]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800207e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b50      	ldr	r3, [pc, #320]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	494d      	ldr	r1, [pc, #308]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d044      	beq.n	8002128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d119      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e07f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	4b3f      	ldr	r3, [pc, #252]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e06f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d6:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e067      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4b37      	ldr	r3, [pc, #220]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4934      	ldr	r1, [pc, #208]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f8:	f7ff f894 	bl	8001224 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7ff f890 	bl	8001224 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e04f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d1eb      	bne.n	8002100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d20c      	bcs.n	8002150 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b22      	ldr	r3, [pc, #136]	@ (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e032      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800215c:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4916      	ldr	r1, [pc, #88]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217a:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	490e      	ldr	r1, [pc, #56]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800218e:	f000 f855 	bl	800223c <HAL_RCC_GetSysClockFreq>
 8002192:	4602      	mov	r2, r0
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	490a      	ldr	r1, [pc, #40]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	5ccb      	ldrb	r3, [r1, r3]
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fff4 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023c00 	.word	0x40023c00
 80021c4:	40023800 	.word	0x40023800
 80021c8:	08004a30 	.word	0x08004a30
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000004 	.word	0x20000004

080021d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f0:	f7ff fff0 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0a9b      	lsrs	r3, r3, #10
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4903      	ldr	r1, [pc, #12]	@ (8002210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	08004a40 	.word	0x08004a40

08002214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002218:	f7ff ffdc 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0b5b      	lsrs	r3, r3, #13
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	@ (8002238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	08004a40 	.word	0x08004a40

0800223c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002240:	b0ae      	sub	sp, #184	@ 0xb8
 8002242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002262:	4bcb      	ldr	r3, [pc, #812]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x354>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b0c      	cmp	r3, #12
 800226c:	f200 8206 	bhi.w	800267c <HAL_RCC_GetSysClockFreq+0x440>
 8002270:	a201      	add	r2, pc, #4	@ (adr r2, 8002278 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	080022ad 	.word	0x080022ad
 800227c:	0800267d 	.word	0x0800267d
 8002280:	0800267d 	.word	0x0800267d
 8002284:	0800267d 	.word	0x0800267d
 8002288:	080022b5 	.word	0x080022b5
 800228c:	0800267d 	.word	0x0800267d
 8002290:	0800267d 	.word	0x0800267d
 8002294:	0800267d 	.word	0x0800267d
 8002298:	080022bd 	.word	0x080022bd
 800229c:	0800267d 	.word	0x0800267d
 80022a0:	0800267d 	.word	0x0800267d
 80022a4:	0800267d 	.word	0x0800267d
 80022a8:	080024ad 	.word	0x080024ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x358>)
 80022ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022b2:	e1e7      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b4:	4bb8      	ldr	r3, [pc, #736]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022ba:	e1e3      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022bc:	4bb4      	ldr	r3, [pc, #720]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x354>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c8:	4bb1      	ldr	r3, [pc, #708]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d071      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d4:	4bae      	ldr	r3, [pc, #696]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x354>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	2200      	movs	r2, #0
 80022dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022e0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80022e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022fa:	4622      	mov	r2, r4
 80022fc:	462b      	mov	r3, r5
 80022fe:	f04f 0000 	mov.w	r0, #0
 8002302:	f04f 0100 	mov.w	r1, #0
 8002306:	0159      	lsls	r1, r3, #5
 8002308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800230c:	0150      	lsls	r0, r2, #5
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4621      	mov	r1, r4
 8002314:	1a51      	subs	r1, r2, r1
 8002316:	6439      	str	r1, [r7, #64]	@ 0x40
 8002318:	4629      	mov	r1, r5
 800231a:	eb63 0301 	sbc.w	r3, r3, r1
 800231e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800232c:	4649      	mov	r1, r9
 800232e:	018b      	lsls	r3, r1, #6
 8002330:	4641      	mov	r1, r8
 8002332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002336:	4641      	mov	r1, r8
 8002338:	018a      	lsls	r2, r1, #6
 800233a:	4641      	mov	r1, r8
 800233c:	1a51      	subs	r1, r2, r1
 800233e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002340:	4649      	mov	r1, r9
 8002342:	eb63 0301 	sbc.w	r3, r3, r1
 8002346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002354:	4649      	mov	r1, r9
 8002356:	00cb      	lsls	r3, r1, #3
 8002358:	4641      	mov	r1, r8
 800235a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800235e:	4641      	mov	r1, r8
 8002360:	00ca      	lsls	r2, r1, #3
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	4603      	mov	r3, r0
 8002368:	4622      	mov	r2, r4
 800236a:	189b      	adds	r3, r3, r2
 800236c:	633b      	str	r3, [r7, #48]	@ 0x30
 800236e:	462b      	mov	r3, r5
 8002370:	460a      	mov	r2, r1
 8002372:	eb42 0303 	adc.w	r3, r2, r3
 8002376:	637b      	str	r3, [r7, #52]	@ 0x34
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002384:	4629      	mov	r1, r5
 8002386:	024b      	lsls	r3, r1, #9
 8002388:	4621      	mov	r1, r4
 800238a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800238e:	4621      	mov	r1, r4
 8002390:	024a      	lsls	r2, r1, #9
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800239a:	2200      	movs	r2, #0
 800239c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023a8:	f7fd ff82 	bl	80002b0 <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4613      	mov	r3, r2
 80023b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023b6:	e067      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b8:	4b75      	ldr	r3, [pc, #468]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	2200      	movs	r2, #0
 80023c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023c4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80023c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023d2:	2300      	movs	r3, #0
 80023d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80023da:	4622      	mov	r2, r4
 80023dc:	462b      	mov	r3, r5
 80023de:	f04f 0000 	mov.w	r0, #0
 80023e2:	f04f 0100 	mov.w	r1, #0
 80023e6:	0159      	lsls	r1, r3, #5
 80023e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ec:	0150      	lsls	r0, r2, #5
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4621      	mov	r1, r4
 80023f4:	1a51      	subs	r1, r2, r1
 80023f6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80023f8:	4629      	mov	r1, r5
 80023fa:	eb63 0301 	sbc.w	r3, r3, r1
 80023fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800240c:	4649      	mov	r1, r9
 800240e:	018b      	lsls	r3, r1, #6
 8002410:	4641      	mov	r1, r8
 8002412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002416:	4641      	mov	r1, r8
 8002418:	018a      	lsls	r2, r1, #6
 800241a:	4641      	mov	r1, r8
 800241c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002420:	4649      	mov	r1, r9
 8002422:	eb63 0b01 	sbc.w	fp, r3, r1
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002432:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002436:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800243a:	4692      	mov	sl, r2
 800243c:	469b      	mov	fp, r3
 800243e:	4623      	mov	r3, r4
 8002440:	eb1a 0303 	adds.w	r3, sl, r3
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	462b      	mov	r3, r5
 8002448:	eb4b 0303 	adc.w	r3, fp, r3
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800245a:	4629      	mov	r1, r5
 800245c:	028b      	lsls	r3, r1, #10
 800245e:	4621      	mov	r1, r4
 8002460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002464:	4621      	mov	r1, r4
 8002466:	028a      	lsls	r2, r1, #10
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002470:	2200      	movs	r2, #0
 8002472:	673b      	str	r3, [r7, #112]	@ 0x70
 8002474:	677a      	str	r2, [r7, #116]	@ 0x74
 8002476:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800247a:	f7fd ff19 	bl	80002b0 <__aeabi_uldivmod>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4613      	mov	r3, r2
 8002484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002488:	4b41      	ldr	r3, [pc, #260]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x354>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	0c1b      	lsrs	r3, r3, #16
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	3301      	adds	r3, #1
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800249a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800249e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024aa:	e0eb      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ac:	4b38      	ldr	r3, [pc, #224]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b8:	4b35      	ldr	r3, [pc, #212]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d06b      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c4:	4b32      	ldr	r3, [pc, #200]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x354>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	2200      	movs	r2, #0
 80024cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80024d8:	2300      	movs	r3, #0
 80024da:	667b      	str	r3, [r7, #100]	@ 0x64
 80024dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80024e0:	4622      	mov	r2, r4
 80024e2:	462b      	mov	r3, r5
 80024e4:	f04f 0000 	mov.w	r0, #0
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	0159      	lsls	r1, r3, #5
 80024ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f2:	0150      	lsls	r0, r2, #5
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4621      	mov	r1, r4
 80024fa:	1a51      	subs	r1, r2, r1
 80024fc:	61b9      	str	r1, [r7, #24]
 80024fe:	4629      	mov	r1, r5
 8002500:	eb63 0301 	sbc.w	r3, r3, r1
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002512:	4659      	mov	r1, fp
 8002514:	018b      	lsls	r3, r1, #6
 8002516:	4651      	mov	r1, sl
 8002518:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800251c:	4651      	mov	r1, sl
 800251e:	018a      	lsls	r2, r1, #6
 8002520:	4651      	mov	r1, sl
 8002522:	ebb2 0801 	subs.w	r8, r2, r1
 8002526:	4659      	mov	r1, fp
 8002528:	eb63 0901 	sbc.w	r9, r3, r1
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002538:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800253c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002540:	4690      	mov	r8, r2
 8002542:	4699      	mov	r9, r3
 8002544:	4623      	mov	r3, r4
 8002546:	eb18 0303 	adds.w	r3, r8, r3
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	462b      	mov	r3, r5
 800254e:	eb49 0303 	adc.w	r3, r9, r3
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002560:	4629      	mov	r1, r5
 8002562:	024b      	lsls	r3, r1, #9
 8002564:	4621      	mov	r1, r4
 8002566:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800256a:	4621      	mov	r1, r4
 800256c:	024a      	lsls	r2, r1, #9
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002576:	2200      	movs	r2, #0
 8002578:	65bb      	str	r3, [r7, #88]	@ 0x58
 800257a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800257c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002580:	f7fd fe96 	bl	80002b0 <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4613      	mov	r3, r2
 800258a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800258e:	e065      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x420>
 8002590:	40023800 	.word	0x40023800
 8002594:	00f42400 	.word	0x00f42400
 8002598:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259c:	4b3d      	ldr	r3, [pc, #244]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x458>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	2200      	movs	r2, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	4611      	mov	r1, r2
 80025a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80025ae:	2300      	movs	r3, #0
 80025b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80025b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80025b6:	4642      	mov	r2, r8
 80025b8:	464b      	mov	r3, r9
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c8:	0150      	lsls	r0, r2, #5
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4641      	mov	r1, r8
 80025d0:	1a51      	subs	r1, r2, r1
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	4649      	mov	r1, r9
 80025d6:	eb63 0301 	sbc.w	r3, r3, r1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025e8:	4659      	mov	r1, fp
 80025ea:	018b      	lsls	r3, r1, #6
 80025ec:	4651      	mov	r1, sl
 80025ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f2:	4651      	mov	r1, sl
 80025f4:	018a      	lsls	r2, r1, #6
 80025f6:	4651      	mov	r1, sl
 80025f8:	1a54      	subs	r4, r2, r1
 80025fa:	4659      	mov	r1, fp
 80025fc:	eb63 0501 	sbc.w	r5, r3, r1
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	00eb      	lsls	r3, r5, #3
 800260a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800260e:	00e2      	lsls	r2, r4, #3
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	4643      	mov	r3, r8
 8002616:	18e3      	adds	r3, r4, r3
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	464b      	mov	r3, r9
 800261c:	eb45 0303 	adc.w	r3, r5, r3
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800262e:	4629      	mov	r1, r5
 8002630:	028b      	lsls	r3, r1, #10
 8002632:	4621      	mov	r1, r4
 8002634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002638:	4621      	mov	r1, r4
 800263a:	028a      	lsls	r2, r1, #10
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002644:	2200      	movs	r2, #0
 8002646:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002648:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800264a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800264e:	f7fd fe2f 	bl	80002b0 <__aeabi_uldivmod>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4613      	mov	r3, r2
 8002658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800265c:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x458>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	0f1b      	lsrs	r3, r3, #28
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800266a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800266e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002672:	fbb2 f3f3 	udiv	r3, r2, r3
 8002676:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800267a:	e003      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x45c>)
 800267e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002682:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002688:	4618      	mov	r0, r3
 800268a:	37b8      	adds	r7, #184	@ 0xb8
 800268c:	46bd      	mov	sp, r7
 800268e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	00f42400 	.word	0x00f42400

0800269c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e28d      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8083 	beq.w	80027c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026bc:	4b94      	ldr	r3, [pc, #592]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d019      	beq.n	80026fc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026c8:	4b91      	ldr	r3, [pc, #580]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
        || \
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026e0:	d00c      	beq.n	80026fc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d112      	bne.n	8002714 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b88      	ldr	r3, [pc, #544]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026fa:	d10b      	bne.n	8002714 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	4b84      	ldr	r3, [pc, #528]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d05b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x124>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d157      	bne.n	80027c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e25a      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x90>
 800271e:	4b7c      	ldr	r3, [pc, #496]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a7b      	ldr	r2, [pc, #492]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e01d      	b.n	8002768 <HAL_RCC_OscConfig+0xcc>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0xb4>
 8002736:	4b76      	ldr	r3, [pc, #472]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a75      	ldr	r2, [pc, #468]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b73      	ldr	r3, [pc, #460]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a72      	ldr	r2, [pc, #456]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0xcc>
 8002750:	4b6f      	ldr	r3, [pc, #444]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a6e      	ldr	r2, [pc, #440]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b6c      	ldr	r3, [pc, #432]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6b      	ldr	r2, [pc, #428]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fd58 	bl	8001224 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002778:	f7fe fd54 	bl	8001224 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	@ 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e21f      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b61      	ldr	r3, [pc, #388]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0xdc>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fd44 	bl	8001224 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a0:	f7fe fd40 	bl	8001224 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	@ 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e20b      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	4b57      	ldr	r3, [pc, #348]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x104>
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d06f      	beq.n	80028ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027ce:	4b50      	ldr	r3, [pc, #320]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d017      	beq.n	800280a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027da:	4b4d      	ldr	r3, [pc, #308]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
        || \
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d105      	bne.n	80027f2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f2:	4b47      	ldr	r3, [pc, #284]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d11c      	bne.n	8002838 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fe:	4b44      	ldr	r3, [pc, #272]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d116      	bne.n	8002838 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280a:	4b41      	ldr	r3, [pc, #260]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_RCC_OscConfig+0x186>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d001      	beq.n	8002822 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e1d3      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	4b3b      	ldr	r3, [pc, #236]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4937      	ldr	r1, [pc, #220]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002836:	e03a      	b.n	80028ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d020      	beq.n	8002882 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002840:	4b34      	ldr	r3, [pc, #208]	@ (8002914 <HAL_RCC_OscConfig+0x278>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe fced 	bl	8001224 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7fe fce9 	bl	8001224 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e1b4      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	4b2b      	ldr	r3, [pc, #172]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b28      	ldr	r3, [pc, #160]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4925      	ldr	r1, [pc, #148]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
 8002880:	e015      	b.n	80028ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002882:	4b24      	ldr	r3, [pc, #144]	@ (8002914 <HAL_RCC_OscConfig+0x278>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fccc 	bl	8001224 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002890:	f7fe fcc8 	bl	8001224 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e193      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d036      	beq.n	8002928 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_RCC_OscConfig+0x27c>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe fcac 	bl	8001224 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d0:	f7fe fca8 	bl	8001224 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e173      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80028e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x234>
 80028ee:	e01b      	b.n	8002928 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f0:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <HAL_RCC_OscConfig+0x27c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7fe fc95 	bl	8001224 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fc:	e00e      	b.n	800291c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fe:	f7fe fc91 	bl	8001224 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d907      	bls.n	800291c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e15c      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
 8002910:	40023800 	.word	0x40023800
 8002914:	42470000 	.word	0x42470000
 8002918:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291c:	4b8a      	ldr	r3, [pc, #552]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 800291e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1ea      	bne.n	80028fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8097 	beq.w	8002a64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293a:	4b83      	ldr	r3, [pc, #524]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10f      	bne.n	8002966 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 8002950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002954:	6413      	str	r3, [r2, #64]	@ 0x40
 8002956:	4b7c      	ldr	r3, [pc, #496]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b79      	ldr	r3, [pc, #484]	@ (8002b4c <HAL_RCC_OscConfig+0x4b0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d118      	bne.n	80029a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002972:	4b76      	ldr	r3, [pc, #472]	@ (8002b4c <HAL_RCC_OscConfig+0x4b0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a75      	ldr	r2, [pc, #468]	@ (8002b4c <HAL_RCC_OscConfig+0x4b0>)
 8002978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297e:	f7fe fc51 	bl	8001224 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002986:	f7fe fc4d 	bl	8001224 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e118      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	4b6c      	ldr	r3, [pc, #432]	@ (8002b4c <HAL_RCC_OscConfig+0x4b0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x31e>
 80029ac:	4b66      	ldr	r3, [pc, #408]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b0:	4a65      	ldr	r2, [pc, #404]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b8:	e01c      	b.n	80029f4 <HAL_RCC_OscConfig+0x358>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b05      	cmp	r3, #5
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x340>
 80029c2:	4b61      	ldr	r3, [pc, #388]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	4a60      	ldr	r2, [pc, #384]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ce:	4b5e      	ldr	r3, [pc, #376]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d2:	4a5d      	ldr	r2, [pc, #372]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029da:	e00b      	b.n	80029f4 <HAL_RCC_OscConfig+0x358>
 80029dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e0:	4a59      	ldr	r2, [pc, #356]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e8:	4b57      	ldr	r3, [pc, #348]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ec:	4a56      	ldr	r2, [pc, #344]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 80029ee:	f023 0304 	bic.w	r3, r3, #4
 80029f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d015      	beq.n	8002a28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe fc12 	bl	8001224 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f7fe fc0e 	bl	8001224 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e0d7      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ee      	beq.n	8002a04 <HAL_RCC_OscConfig+0x368>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fbfc 	bl	8001224 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7fe fbf8 	bl	8001224 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0c1      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a46:	4b40      	ldr	r3, [pc, #256]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1ee      	bne.n	8002a30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a58:	4b3b      	ldr	r3, [pc, #236]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 8002a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80ad 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a6e:	4b36      	ldr	r3, [pc, #216]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d060      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d145      	bne.n	8002b0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a82:	4b33      	ldr	r3, [pc, #204]	@ (8002b50 <HAL_RCC_OscConfig+0x4b4>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fbcc 	bl	8001224 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe fbc8 	bl	8001224 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e093      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	4b29      	ldr	r3, [pc, #164]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	041b      	lsls	r3, r3, #16
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad8:	071b      	lsls	r3, r3, #28
 8002ada:	491b      	ldr	r1, [pc, #108]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <HAL_RCC_OscConfig+0x4b4>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fb9d 	bl	8001224 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe fb99 	bl	8001224 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e064      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b00:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x452>
 8002b0c:	e05c      	b.n	8002bc8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0e:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <HAL_RCC_OscConfig+0x4b4>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fb86 	bl	8001224 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fb82 	bl	8001224 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e04d      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <HAL_RCC_OscConfig+0x4ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x480>
 8002b3a:	e045      	b.n	8002bc8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d107      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e040      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40007000 	.word	0x40007000
 8002b50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b54:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd4 <HAL_RCC_OscConfig+0x538>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d030      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d129      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d122      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d119      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9a:	085b      	lsrs	r3, r3, #1
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d10f      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800

08002bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e042      	b.n	8002c70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe f934 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	@ 0x24
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 ff59 	bl	8003ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	@ 0x28
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d175      	bne.n	8002d84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_UART_Transmit+0x2c>
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e06e      	b.n	8002d86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2221      	movs	r2, #33	@ 0x21
 8002cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cb6:	f7fe fab5 	bl	8001224 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	88fa      	ldrh	r2, [r7, #6]
 8002cc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd0:	d108      	bne.n	8002ce4 <HAL_UART_Transmit+0x6c>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d104      	bne.n	8002ce4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	e003      	b.n	8002cec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cec:	e02e      	b.n	8002d4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2180      	movs	r1, #128	@ 0x80
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fc31 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e03a      	b.n	8002d86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	3302      	adds	r3, #2
 8002d2a:	61bb      	str	r3, [r7, #24]
 8002d2c:	e007      	b.n	8002d3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1cb      	bne.n	8002cee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2140      	movs	r1, #64	@ 0x40
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fbfd 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e006      	b.n	8002d86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d112      	bne.n	8002dce <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_UART_Receive_DMA+0x26>
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e00b      	b.n	8002dd0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fc25 	bl	8003614 <UART_Start_Receive_DMA>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	e000      	b.n	8002dd0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
  }
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b0ba      	sub	sp, #232	@ 0xe8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10f      	bne.n	8002e3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_UART_IRQHandler+0x66>
 8002e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fd8d 	bl	8003956 <UART_Receive_IT>
      return;
 8002e3c:	e25b      	b.n	80032f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 80de 	beq.w	8003004 <HAL_UART_IRQHandler+0x22c>
 8002e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80d1 	beq.w	8003004 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <HAL_UART_IRQHandler+0xae>
 8002e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_UART_IRQHandler+0xd2>
 8002e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	f043 0202 	orr.w	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_UART_IRQHandler+0xf6>
 8002eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f043 0204 	orr.w	r2, r3, #4
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d011      	beq.n	8002efe <HAL_UART_IRQHandler+0x126>
 8002eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	f043 0208 	orr.w	r2, r3, #8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 81f2 	beq.w	80032ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_UART_IRQHandler+0x14e>
 8002f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fd18 	bl	8003956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f30:	2b40      	cmp	r3, #64	@ 0x40
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d103      	bne.n	8002f52 <HAL_UART_IRQHandler+0x17a>
 8002f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d04f      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fc20 	bl	8003798 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f62:	2b40      	cmp	r3, #64	@ 0x40
 8002f64:	d141      	bne.n	8002fea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3314      	adds	r3, #20
 8002f6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1d9      	bne.n	8002f66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d013      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80031b8 <HAL_UART_IRQHandler+0x3e0>)
 8002fc0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fbe4 	bl	8001794 <HAL_DMA_Abort_IT>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d016      	beq.n	8003000 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe0:	e00e      	b.n	8003000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f9a8 	bl	8003338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	e00a      	b.n	8003000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f9a4 	bl	8003338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	e006      	b.n	8003000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f9a0 	bl	8003338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ffe:	e175      	b.n	80032ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003000:	bf00      	nop
    return;
 8003002:	e173      	b.n	80032ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003008:	2b01      	cmp	r3, #1
 800300a:	f040 814f 	bne.w	80032ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8148 	beq.w	80032ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800301c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8141 	beq.w	80032ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304a:	2b40      	cmp	r3, #64	@ 0x40
 800304c:	f040 80b6 	bne.w	80031bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800305c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8145 	beq.w	80032f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800306a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800306e:	429a      	cmp	r2, r3
 8003070:	f080 813e 	bcs.w	80032f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800307a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003086:	f000 8088 	beq.w	800319a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030c6:	e841 2300 	strex	r3, r2, [r1]
 80030ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1d9      	bne.n	800308a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3314      	adds	r3, #20
 80030dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3314      	adds	r3, #20
 80030f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003102:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800310c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e1      	bne.n	80030d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3314      	adds	r3, #20
 8003118:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3314      	adds	r3, #20
 8003132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003136:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003138:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800313c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e3      	bne.n	8003112 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003162:	e853 3f00 	ldrex	r3, [r3]
 8003166:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800316a:	f023 0310 	bic.w	r3, r3, #16
 800316e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800317c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800317e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003180:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003182:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003184:	e841 2300 	strex	r3, r2, [r1]
 8003188:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800318a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e3      	bne.n	8003158 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003194:	4618      	mov	r0, r3
 8003196:	f7fe fa8d 	bl	80016b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f8cb 	bl	800334c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031b6:	e09b      	b.n	80032f0 <HAL_UART_IRQHandler+0x518>
 80031b8:	0800385f 	.word	0x0800385f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 808e 	beq.w	80032f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8089 	beq.w	80032f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	330c      	adds	r3, #12
 8003202:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003206:	647a      	str	r2, [r7, #68]	@ 0x44
 8003208:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800320c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e3      	bne.n	80031e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3314      	adds	r3, #20
 8003220:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	623b      	str	r3, [r7, #32]
   return(result);
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3314      	adds	r3, #20
 800323a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800323e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003240:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800324c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e3      	bne.n	800321a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	e853 3f00 	ldrex	r3, [r3]
 800326e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0310 	bic.w	r3, r3, #16
 8003276:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	330c      	adds	r3, #12
 8003280:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003284:	61fa      	str	r2, [r7, #28]
 8003286:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	69b9      	ldr	r1, [r7, #24]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	e841 2300 	strex	r3, r2, [r1]
 8003290:	617b      	str	r3, [r7, #20]
   return(result);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e3      	bne.n	8003260 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800329e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032a2:	4619      	mov	r1, r3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f851 	bl	800334c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032aa:	e023      	b.n	80032f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <HAL_UART_IRQHandler+0x4f4>
 80032b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fade 	bl	8003886 <UART_Transmit_IT>
    return;
 80032ca:	e014      	b.n	80032f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00e      	beq.n	80032f6 <HAL_UART_IRQHandler+0x51e>
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fb1e 	bl	8003926 <UART_EndTransmit_IT>
    return;
 80032ea:	e004      	b.n	80032f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80032ec:	bf00      	nop
 80032ee:	e002      	b.n	80032f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80032f0:	bf00      	nop
 80032f2:	e000      	b.n	80032f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80032f4:	bf00      	nop
  }
}
 80032f6:	37e8      	adds	r7, #232	@ 0xe8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b09c      	sub	sp, #112	@ 0x70
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d172      	bne.n	8003466 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003382:	2200      	movs	r2, #0
 8003384:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800339c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800339e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	330c      	adds	r3, #12
 80033a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80033a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033a8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e5      	bne.n	8003386 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3314      	adds	r3, #20
 80033c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80033d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80033da:	647a      	str	r2, [r7, #68]	@ 0x44
 80033dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e5      	bne.n	80033ba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3314      	adds	r3, #20
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	e853 3f00 	ldrex	r3, [r3]
 80033fc:	623b      	str	r3, [r7, #32]
   return(result);
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003404:	663b      	str	r3, [r7, #96]	@ 0x60
 8003406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3314      	adds	r3, #20
 800340c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800340e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003410:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800341c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e5      	bne.n	80033ee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003424:	2220      	movs	r2, #32
 8003426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	2b01      	cmp	r3, #1
 8003430:	d119      	bne.n	8003466 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	60fb      	str	r3, [r7, #12]
   return(result);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f023 0310 	bic.w	r3, r3, #16
 8003448:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800344a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003452:	61fa      	str	r2, [r7, #28]
 8003454:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	69b9      	ldr	r1, [r7, #24]
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	617b      	str	r3, [r7, #20]
   return(result);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e5      	bne.n	8003432 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003468:	2200      	movs	r2, #0
 800346a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800346c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003470:	2b01      	cmp	r3, #1
 8003472:	d106      	bne.n	8003482 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003476:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003478:	4619      	mov	r1, r3
 800347a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800347c:	f7ff ff66 	bl	800334c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003480:	e002      	b.n	8003488 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003482:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003484:	f7ff ff44 	bl	8003310 <HAL_UART_RxCpltCallback>
}
 8003488:	bf00      	nop
 800348a:	3770      	adds	r7, #112	@ 0x70
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d108      	bne.n	80034be <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4619      	mov	r1, r3
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7ff ff48 	bl	800334c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034bc:	e002      	b.n	80034c4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff ff30 	bl	8003324 <HAL_UART_RxHalfCpltCallback>
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e8:	2b80      	cmp	r3, #128	@ 0x80
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b21      	cmp	r3, #33	@ 0x21
 80034fe:	d108      	bne.n	8003512 <UART_DMAError+0x46>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2200      	movs	r2, #0
 800350a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800350c:	68b8      	ldr	r0, [r7, #8]
 800350e:	f000 f91b 	bl	8003748 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351c:	2b40      	cmp	r3, #64	@ 0x40
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b22      	cmp	r3, #34	@ 0x22
 8003532:	d108      	bne.n	8003546 <UART_DMAError+0x7a>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2200      	movs	r2, #0
 800353e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003540:	68b8      	ldr	r0, [r7, #8]
 8003542:	f000 f929 	bl	8003798 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	f043 0210 	orr.w	r2, r3, #16
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003552:	68b8      	ldr	r0, [r7, #8]
 8003554:	f7ff fef0 	bl	8003338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003570:	e03b      	b.n	80035ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d037      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357a:	f7fd fe53 	bl	8001224 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	6a3a      	ldr	r2, [r7, #32]
 8003586:	429a      	cmp	r2, r3
 8003588:	d302      	bcc.n	8003590 <UART_WaitOnFlagUntilTimeout+0x30>
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e03a      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d023      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b80      	cmp	r3, #128	@ 0x80
 80035a6:	d020      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b40      	cmp	r3, #64	@ 0x40
 80035ac:	d01d      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d116      	bne.n	80035ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f8e0 	bl	8003798 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2208      	movs	r2, #8
 80035dc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00f      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	429a      	cmp	r2, r3
 8003606:	d0b4      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b098      	sub	sp, #96	@ 0x60
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2222      	movs	r2, #34	@ 0x22
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003640:	4a3e      	ldr	r2, [pc, #248]	@ (800373c <UART_Start_Receive_DMA+0x128>)
 8003642:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	4a3d      	ldr	r2, [pc, #244]	@ (8003740 <UART_Start_Receive_DMA+0x12c>)
 800364a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003650:	4a3c      	ldr	r2, [pc, #240]	@ (8003744 <UART_Start_Receive_DMA+0x130>)
 8003652:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	2200      	movs	r2, #0
 800365a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800365c:	f107 0308 	add.w	r3, r7, #8
 8003660:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3304      	adds	r3, #4
 800366c:	4619      	mov	r1, r3
 800366e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	f7fd ffc6 	bl	8001604 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d019      	beq.n	80036ca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	330c      	adds	r3, #12
 800369c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80036b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80036bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80036c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e5      	bne.n	8003696 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3314      	adds	r3, #20
 80036d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036ea:	63ba      	str	r2, [r7, #56]	@ 0x38
 80036ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80036f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e5      	bne.n	80036ca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3314      	adds	r3, #20
 8003704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	617b      	str	r3, [r7, #20]
   return(result);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003714:	653b      	str	r3, [r7, #80]	@ 0x50
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3314      	adds	r3, #20
 800371c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800371e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	6a39      	ldr	r1, [r7, #32]
 8003724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	61fb      	str	r3, [r7, #28]
   return(result);
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e5      	bne.n	80036fe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3760      	adds	r7, #96	@ 0x60
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	08003365 	.word	0x08003365
 8003740:	08003491 	.word	0x08003491
 8003744:	080034cd 	.word	0x080034cd

08003748 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	@ 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	61ba      	str	r2, [r7, #24]
 8003772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6979      	ldr	r1, [r7, #20]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	613b      	str	r3, [r7, #16]
   return(result);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800378c:	bf00      	nop
 800378e:	3724      	adds	r7, #36	@ 0x24
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003798:	b480      	push	{r7}
 800379a:	b095      	sub	sp, #84	@ 0x54
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80037c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3314      	adds	r3, #20
 80037da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3314      	adds	r3, #20
 80037f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037fc:	e841 2300 	strex	r3, r2, [r1]
 8003800:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1e5      	bne.n	80037d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	2b01      	cmp	r3, #1
 800380e:	d119      	bne.n	8003844 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f023 0310 	bic.w	r3, r3, #16
 8003826:	647b      	str	r3, [r7, #68]	@ 0x44
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003830:	61ba      	str	r2, [r7, #24]
 8003832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6979      	ldr	r1, [r7, #20]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	613b      	str	r3, [r7, #16]
   return(result);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e5      	bne.n	8003810 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003852:	bf00      	nop
 8003854:	3754      	adds	r7, #84	@ 0x54
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7ff fd5d 	bl	8003338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b21      	cmp	r3, #33	@ 0x21
 8003898:	d13e      	bne.n	8003918 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a2:	d114      	bne.n	80038ce <UART_Transmit_IT+0x48>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d110      	bne.n	80038ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	1c9a      	adds	r2, r3, #2
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	621a      	str	r2, [r3, #32]
 80038cc:	e008      	b.n	80038e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	1c59      	adds	r1, r3, #1
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6211      	str	r1, [r2, #32]
 80038d8:	781a      	ldrb	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4619      	mov	r1, r3
 80038ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10f      	bne.n	8003914 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003902:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003912:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800393c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fcd8 	bl	80032fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b08c      	sub	sp, #48	@ 0x30
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b22      	cmp	r3, #34	@ 0x22
 8003968:	f040 80ae 	bne.w	8003ac8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003974:	d117      	bne.n	80039a6 <UART_Receive_IT+0x50>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d113      	bne.n	80039a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003986:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003994:	b29a      	uxth	r2, r3
 8003996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003998:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	1c9a      	adds	r2, r3, #2
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80039a4:	e026      	b.n	80039f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b8:	d007      	beq.n	80039ca <UART_Receive_IT+0x74>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <UART_Receive_IT+0x82>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e008      	b.n	80039ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4619      	mov	r1, r3
 8003a02:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d15d      	bne.n	8003ac4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0220 	bic.w	r2, r2, #32
 8003a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d135      	bne.n	8003aba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	613b      	str	r3, [r7, #16]
   return(result);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f023 0310 	bic.w	r3, r3, #16
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a74:	623a      	str	r2, [r7, #32]
 8003a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	69f9      	ldr	r1, [r7, #28]
 8003a7a:	6a3a      	ldr	r2, [r7, #32]
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d10a      	bne.n	8003aac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff fc4a 	bl	800334c <HAL_UARTEx_RxEventCallback>
 8003ab8:	e002      	b.n	8003ac0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fc28 	bl	8003310 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e002      	b.n	8003aca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3730      	adds	r7, #48	@ 0x30
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad8:	b0c0      	sub	sp, #256	@ 0x100
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af0:	68d9      	ldr	r1, [r3, #12]
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	ea40 0301 	orr.w	r3, r0, r1
 8003afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b2c:	f021 010c 	bic.w	r1, r1, #12
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4e:	6999      	ldr	r1, [r3, #24]
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	ea40 0301 	orr.w	r3, r0, r1
 8003b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b8f      	ldr	r3, [pc, #572]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d005      	beq.n	8003b74 <UART_SetConfig+0xa0>
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b8d      	ldr	r3, [pc, #564]	@ (8003da4 <UART_SetConfig+0x2d0>)
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d104      	bne.n	8003b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b74:	f7fe fb4e 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 8003b78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b7c:	e003      	b.n	8003b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b7e:	f7fe fb35 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8003b82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b90:	f040 810c 	bne.w	8003dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	462b      	mov	r3, r5
 8003baa:	1891      	adds	r1, r2, r2
 8003bac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bae:	415b      	adcs	r3, r3
 8003bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	eb12 0801 	adds.w	r8, r2, r1
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	eb43 0901 	adc.w	r9, r3, r1
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bd6:	4690      	mov	r8, r2
 8003bd8:	4699      	mov	r9, r3
 8003bda:	4623      	mov	r3, r4
 8003bdc:	eb18 0303 	adds.w	r3, r8, r3
 8003be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003be4:	462b      	mov	r3, r5
 8003be6:	eb49 0303 	adc.w	r3, r9, r3
 8003bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c02:	460b      	mov	r3, r1
 8003c04:	18db      	adds	r3, r3, r3
 8003c06:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c08:	4613      	mov	r3, r2
 8003c0a:	eb42 0303 	adc.w	r3, r2, r3
 8003c0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c18:	f7fc fb4a 	bl	80002b0 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4b61      	ldr	r3, [pc, #388]	@ (8003da8 <UART_SetConfig+0x2d4>)
 8003c22:	fba3 2302 	umull	r2, r3, r3, r2
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	011c      	lsls	r4, r3, #4
 8003c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c3c:	4642      	mov	r2, r8
 8003c3e:	464b      	mov	r3, r9
 8003c40:	1891      	adds	r1, r2, r2
 8003c42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c44:	415b      	adcs	r3, r3
 8003c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c52:	4649      	mov	r1, r9
 8003c54:	eb43 0b01 	adc.w	fp, r3, r1
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c6c:	4692      	mov	sl, r2
 8003c6e:	469b      	mov	fp, r3
 8003c70:	4643      	mov	r3, r8
 8003c72:	eb1a 0303 	adds.w	r3, sl, r3
 8003c76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	18db      	adds	r3, r3, r3
 8003c9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	eb42 0303 	adc.w	r3, r2, r3
 8003ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cae:	f7fc faff 	bl	80002b0 <__aeabi_uldivmod>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8003da8 <UART_SetConfig+0x2d4>)
 8003cba:	fba3 2301 	umull	r2, r3, r3, r1
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	2264      	movs	r2, #100	@ 0x64
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	1acb      	subs	r3, r1, r3
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cce:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <UART_SetConfig+0x2d4>)
 8003cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cdc:	441c      	add	r4, r3
 8003cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cf0:	4642      	mov	r2, r8
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	1891      	adds	r1, r2, r2
 8003cf6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cf8:	415b      	adcs	r3, r3
 8003cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d00:	4641      	mov	r1, r8
 8003d02:	1851      	adds	r1, r2, r1
 8003d04:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d06:	4649      	mov	r1, r9
 8003d08:	414b      	adcs	r3, r1
 8003d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d18:	4659      	mov	r1, fp
 8003d1a:	00cb      	lsls	r3, r1, #3
 8003d1c:	4651      	mov	r1, sl
 8003d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d22:	4651      	mov	r1, sl
 8003d24:	00ca      	lsls	r2, r1, #3
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	189b      	adds	r3, r3, r2
 8003d30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d34:	464b      	mov	r3, r9
 8003d36:	460a      	mov	r2, r1
 8003d38:	eb42 0303 	adc.w	r3, r2, r3
 8003d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d54:	460b      	mov	r3, r1
 8003d56:	18db      	adds	r3, r3, r3
 8003d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d6a:	f7fc faa1 	bl	80002b0 <__aeabi_uldivmod>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4b0d      	ldr	r3, [pc, #52]	@ (8003da8 <UART_SetConfig+0x2d4>)
 8003d74:	fba3 1302 	umull	r1, r3, r3, r2
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	2164      	movs	r1, #100	@ 0x64
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	3332      	adds	r3, #50	@ 0x32
 8003d86:	4a08      	ldr	r2, [pc, #32]	@ (8003da8 <UART_SetConfig+0x2d4>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	f003 0207 	and.w	r2, r3, #7
 8003d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4422      	add	r2, r4
 8003d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d9c:	e106      	b.n	8003fac <UART_SetConfig+0x4d8>
 8003d9e:	bf00      	nop
 8003da0:	40011000 	.word	0x40011000
 8003da4:	40011400 	.word	0x40011400
 8003da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003db0:	2200      	movs	r2, #0
 8003db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003db6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dbe:	4642      	mov	r2, r8
 8003dc0:	464b      	mov	r3, r9
 8003dc2:	1891      	adds	r1, r2, r2
 8003dc4:	6239      	str	r1, [r7, #32]
 8003dc6:	415b      	adcs	r3, r3
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dce:	4641      	mov	r1, r8
 8003dd0:	1854      	adds	r4, r2, r1
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	eb43 0501 	adc.w	r5, r3, r1
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	00eb      	lsls	r3, r5, #3
 8003de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de6:	00e2      	lsls	r2, r4, #3
 8003de8:	4614      	mov	r4, r2
 8003dea:	461d      	mov	r5, r3
 8003dec:	4643      	mov	r3, r8
 8003dee:	18e3      	adds	r3, r4, r3
 8003df0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003df4:	464b      	mov	r3, r9
 8003df6:	eb45 0303 	adc.w	r3, r5, r3
 8003dfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	008b      	lsls	r3, r1, #2
 8003e1e:	4621      	mov	r1, r4
 8003e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e24:	4621      	mov	r1, r4
 8003e26:	008a      	lsls	r2, r1, #2
 8003e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e2c:	f7fc fa40 	bl	80002b0 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4b60      	ldr	r3, [pc, #384]	@ (8003fb8 <UART_SetConfig+0x4e4>)
 8003e36:	fba3 2302 	umull	r2, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	011c      	lsls	r4, r3, #4
 8003e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e50:	4642      	mov	r2, r8
 8003e52:	464b      	mov	r3, r9
 8003e54:	1891      	adds	r1, r2, r2
 8003e56:	61b9      	str	r1, [r7, #24]
 8003e58:	415b      	adcs	r3, r3
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e60:	4641      	mov	r1, r8
 8003e62:	1851      	adds	r1, r2, r1
 8003e64:	6139      	str	r1, [r7, #16]
 8003e66:	4649      	mov	r1, r9
 8003e68:	414b      	adcs	r3, r1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e78:	4659      	mov	r1, fp
 8003e7a:	00cb      	lsls	r3, r1, #3
 8003e7c:	4651      	mov	r1, sl
 8003e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e82:	4651      	mov	r1, sl
 8003e84:	00ca      	lsls	r2, r1, #3
 8003e86:	4610      	mov	r0, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4642      	mov	r2, r8
 8003e8e:	189b      	adds	r3, r3, r2
 8003e90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e94:	464b      	mov	r3, r9
 8003e96:	460a      	mov	r2, r1
 8003e98:	eb42 0303 	adc.w	r3, r2, r3
 8003e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eaa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003eb8:	4649      	mov	r1, r9
 8003eba:	008b      	lsls	r3, r1, #2
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	008a      	lsls	r2, r1, #2
 8003ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003eca:	f7fc f9f1 	bl	80002b0 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4b38      	ldr	r3, [pc, #224]	@ (8003fb8 <UART_SetConfig+0x4e4>)
 8003ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2264      	movs	r2, #100	@ 0x64
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	1acb      	subs	r3, r1, r3
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	3332      	adds	r3, #50	@ 0x32
 8003ee8:	4a33      	ldr	r2, [pc, #204]	@ (8003fb8 <UART_SetConfig+0x4e4>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ef4:	441c      	add	r4, r3
 8003ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003efa:	2200      	movs	r2, #0
 8003efc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003efe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f04:	4642      	mov	r2, r8
 8003f06:	464b      	mov	r3, r9
 8003f08:	1891      	adds	r1, r2, r2
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	415b      	adcs	r3, r3
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f14:	4641      	mov	r1, r8
 8003f16:	1851      	adds	r1, r2, r1
 8003f18:	6039      	str	r1, [r7, #0]
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	414b      	adcs	r3, r1
 8003f1e:	607b      	str	r3, [r7, #4]
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	00cb      	lsls	r3, r1, #3
 8003f30:	4651      	mov	r1, sl
 8003f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f36:	4651      	mov	r1, sl
 8003f38:	00ca      	lsls	r2, r1, #3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4642      	mov	r2, r8
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f46:	464b      	mov	r3, r9
 8003f48:	460a      	mov	r2, r1
 8003f4a:	eb42 0303 	adc.w	r3, r2, r3
 8003f4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f68:	4649      	mov	r1, r9
 8003f6a:	008b      	lsls	r3, r1, #2
 8003f6c:	4641      	mov	r1, r8
 8003f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f72:	4641      	mov	r1, r8
 8003f74:	008a      	lsls	r2, r1, #2
 8003f76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f7a:	f7fc f999 	bl	80002b0 <__aeabi_uldivmod>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb8 <UART_SetConfig+0x4e4>)
 8003f84:	fba3 1302 	umull	r1, r3, r3, r2
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	2164      	movs	r1, #100	@ 0x64
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	3332      	adds	r3, #50	@ 0x32
 8003f96:	4a08      	ldr	r2, [pc, #32]	@ (8003fb8 <UART_SetConfig+0x4e4>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	f003 020f 	and.w	r2, r3, #15
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4422      	add	r2, r4
 8003faa:	609a      	str	r2, [r3, #8]
}
 8003fac:	bf00      	nop
 8003fae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb8:	51eb851f 	.word	0x51eb851f

08003fbc <siprintf>:
 8003fbc:	b40e      	push	{r1, r2, r3}
 8003fbe:	b500      	push	{lr}
 8003fc0:	b09c      	sub	sp, #112	@ 0x70
 8003fc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003fc4:	9002      	str	r0, [sp, #8]
 8003fc6:	9006      	str	r0, [sp, #24]
 8003fc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fcc:	4809      	ldr	r0, [pc, #36]	@ (8003ff4 <siprintf+0x38>)
 8003fce:	9107      	str	r1, [sp, #28]
 8003fd0:	9104      	str	r1, [sp, #16]
 8003fd2:	4909      	ldr	r1, [pc, #36]	@ (8003ff8 <siprintf+0x3c>)
 8003fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fd8:	9105      	str	r1, [sp, #20]
 8003fda:	6800      	ldr	r0, [r0, #0]
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	a902      	add	r1, sp, #8
 8003fe0:	f000 f994 	bl	800430c <_svfiprintf_r>
 8003fe4:	9b02      	ldr	r3, [sp, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	b01c      	add	sp, #112	@ 0x70
 8003fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ff0:	b003      	add	sp, #12
 8003ff2:	4770      	bx	lr
 8003ff4:	2000000c 	.word	0x2000000c
 8003ff8:	ffff0208 	.word	0xffff0208

08003ffc <memset>:
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4603      	mov	r3, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <__errno>:
 800400c:	4b01      	ldr	r3, [pc, #4]	@ (8004014 <__errno+0x8>)
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	2000000c 	.word	0x2000000c

08004018 <__libc_init_array>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	4d0d      	ldr	r5, [pc, #52]	@ (8004050 <__libc_init_array+0x38>)
 800401c:	4c0d      	ldr	r4, [pc, #52]	@ (8004054 <__libc_init_array+0x3c>)
 800401e:	1b64      	subs	r4, r4, r5
 8004020:	10a4      	asrs	r4, r4, #2
 8004022:	2600      	movs	r6, #0
 8004024:	42a6      	cmp	r6, r4
 8004026:	d109      	bne.n	800403c <__libc_init_array+0x24>
 8004028:	4d0b      	ldr	r5, [pc, #44]	@ (8004058 <__libc_init_array+0x40>)
 800402a:	4c0c      	ldr	r4, [pc, #48]	@ (800405c <__libc_init_array+0x44>)
 800402c:	f000 fc66 	bl	80048fc <_init>
 8004030:	1b64      	subs	r4, r4, r5
 8004032:	10a4      	asrs	r4, r4, #2
 8004034:	2600      	movs	r6, #0
 8004036:	42a6      	cmp	r6, r4
 8004038:	d105      	bne.n	8004046 <__libc_init_array+0x2e>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004040:	4798      	blx	r3
 8004042:	3601      	adds	r6, #1
 8004044:	e7ee      	b.n	8004024 <__libc_init_array+0xc>
 8004046:	f855 3b04 	ldr.w	r3, [r5], #4
 800404a:	4798      	blx	r3
 800404c:	3601      	adds	r6, #1
 800404e:	e7f2      	b.n	8004036 <__libc_init_array+0x1e>
 8004050:	08004a8c 	.word	0x08004a8c
 8004054:	08004a8c 	.word	0x08004a8c
 8004058:	08004a8c 	.word	0x08004a8c
 800405c:	08004a90 	.word	0x08004a90

08004060 <__retarget_lock_acquire_recursive>:
 8004060:	4770      	bx	lr

08004062 <__retarget_lock_release_recursive>:
 8004062:	4770      	bx	lr

08004064 <_free_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4605      	mov	r5, r0
 8004068:	2900      	cmp	r1, #0
 800406a:	d041      	beq.n	80040f0 <_free_r+0x8c>
 800406c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004070:	1f0c      	subs	r4, r1, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	bfb8      	it	lt
 8004076:	18e4      	addlt	r4, r4, r3
 8004078:	f000 f8e0 	bl	800423c <__malloc_lock>
 800407c:	4a1d      	ldr	r2, [pc, #116]	@ (80040f4 <_free_r+0x90>)
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	b933      	cbnz	r3, 8004090 <_free_r+0x2c>
 8004082:	6063      	str	r3, [r4, #4]
 8004084:	6014      	str	r4, [r2, #0]
 8004086:	4628      	mov	r0, r5
 8004088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800408c:	f000 b8dc 	b.w	8004248 <__malloc_unlock>
 8004090:	42a3      	cmp	r3, r4
 8004092:	d908      	bls.n	80040a6 <_free_r+0x42>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	1821      	adds	r1, r4, r0
 8004098:	428b      	cmp	r3, r1
 800409a:	bf01      	itttt	eq
 800409c:	6819      	ldreq	r1, [r3, #0]
 800409e:	685b      	ldreq	r3, [r3, #4]
 80040a0:	1809      	addeq	r1, r1, r0
 80040a2:	6021      	streq	r1, [r4, #0]
 80040a4:	e7ed      	b.n	8004082 <_free_r+0x1e>
 80040a6:	461a      	mov	r2, r3
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	b10b      	cbz	r3, 80040b0 <_free_r+0x4c>
 80040ac:	42a3      	cmp	r3, r4
 80040ae:	d9fa      	bls.n	80040a6 <_free_r+0x42>
 80040b0:	6811      	ldr	r1, [r2, #0]
 80040b2:	1850      	adds	r0, r2, r1
 80040b4:	42a0      	cmp	r0, r4
 80040b6:	d10b      	bne.n	80040d0 <_free_r+0x6c>
 80040b8:	6820      	ldr	r0, [r4, #0]
 80040ba:	4401      	add	r1, r0
 80040bc:	1850      	adds	r0, r2, r1
 80040be:	4283      	cmp	r3, r0
 80040c0:	6011      	str	r1, [r2, #0]
 80040c2:	d1e0      	bne.n	8004086 <_free_r+0x22>
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	6053      	str	r3, [r2, #4]
 80040ca:	4408      	add	r0, r1
 80040cc:	6010      	str	r0, [r2, #0]
 80040ce:	e7da      	b.n	8004086 <_free_r+0x22>
 80040d0:	d902      	bls.n	80040d8 <_free_r+0x74>
 80040d2:	230c      	movs	r3, #12
 80040d4:	602b      	str	r3, [r5, #0]
 80040d6:	e7d6      	b.n	8004086 <_free_r+0x22>
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	1821      	adds	r1, r4, r0
 80040dc:	428b      	cmp	r3, r1
 80040de:	bf04      	itt	eq
 80040e0:	6819      	ldreq	r1, [r3, #0]
 80040e2:	685b      	ldreq	r3, [r3, #4]
 80040e4:	6063      	str	r3, [r4, #4]
 80040e6:	bf04      	itt	eq
 80040e8:	1809      	addeq	r1, r1, r0
 80040ea:	6021      	streq	r1, [r4, #0]
 80040ec:	6054      	str	r4, [r2, #4]
 80040ee:	e7ca      	b.n	8004086 <_free_r+0x22>
 80040f0:	bd38      	pop	{r3, r4, r5, pc}
 80040f2:	bf00      	nop
 80040f4:	200006c0 	.word	0x200006c0

080040f8 <sbrk_aligned>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004138 <sbrk_aligned+0x40>)
 80040fc:	460c      	mov	r4, r1
 80040fe:	6831      	ldr	r1, [r6, #0]
 8004100:	4605      	mov	r5, r0
 8004102:	b911      	cbnz	r1, 800410a <sbrk_aligned+0x12>
 8004104:	f000 fba6 	bl	8004854 <_sbrk_r>
 8004108:	6030      	str	r0, [r6, #0]
 800410a:	4621      	mov	r1, r4
 800410c:	4628      	mov	r0, r5
 800410e:	f000 fba1 	bl	8004854 <_sbrk_r>
 8004112:	1c43      	adds	r3, r0, #1
 8004114:	d103      	bne.n	800411e <sbrk_aligned+0x26>
 8004116:	f04f 34ff 	mov.w	r4, #4294967295
 800411a:	4620      	mov	r0, r4
 800411c:	bd70      	pop	{r4, r5, r6, pc}
 800411e:	1cc4      	adds	r4, r0, #3
 8004120:	f024 0403 	bic.w	r4, r4, #3
 8004124:	42a0      	cmp	r0, r4
 8004126:	d0f8      	beq.n	800411a <sbrk_aligned+0x22>
 8004128:	1a21      	subs	r1, r4, r0
 800412a:	4628      	mov	r0, r5
 800412c:	f000 fb92 	bl	8004854 <_sbrk_r>
 8004130:	3001      	adds	r0, #1
 8004132:	d1f2      	bne.n	800411a <sbrk_aligned+0x22>
 8004134:	e7ef      	b.n	8004116 <sbrk_aligned+0x1e>
 8004136:	bf00      	nop
 8004138:	200006bc 	.word	0x200006bc

0800413c <_malloc_r>:
 800413c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004140:	1ccd      	adds	r5, r1, #3
 8004142:	f025 0503 	bic.w	r5, r5, #3
 8004146:	3508      	adds	r5, #8
 8004148:	2d0c      	cmp	r5, #12
 800414a:	bf38      	it	cc
 800414c:	250c      	movcc	r5, #12
 800414e:	2d00      	cmp	r5, #0
 8004150:	4606      	mov	r6, r0
 8004152:	db01      	blt.n	8004158 <_malloc_r+0x1c>
 8004154:	42a9      	cmp	r1, r5
 8004156:	d904      	bls.n	8004162 <_malloc_r+0x26>
 8004158:	230c      	movs	r3, #12
 800415a:	6033      	str	r3, [r6, #0]
 800415c:	2000      	movs	r0, #0
 800415e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004162:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004238 <_malloc_r+0xfc>
 8004166:	f000 f869 	bl	800423c <__malloc_lock>
 800416a:	f8d8 3000 	ldr.w	r3, [r8]
 800416e:	461c      	mov	r4, r3
 8004170:	bb44      	cbnz	r4, 80041c4 <_malloc_r+0x88>
 8004172:	4629      	mov	r1, r5
 8004174:	4630      	mov	r0, r6
 8004176:	f7ff ffbf 	bl	80040f8 <sbrk_aligned>
 800417a:	1c43      	adds	r3, r0, #1
 800417c:	4604      	mov	r4, r0
 800417e:	d158      	bne.n	8004232 <_malloc_r+0xf6>
 8004180:	f8d8 4000 	ldr.w	r4, [r8]
 8004184:	4627      	mov	r7, r4
 8004186:	2f00      	cmp	r7, #0
 8004188:	d143      	bne.n	8004212 <_malloc_r+0xd6>
 800418a:	2c00      	cmp	r4, #0
 800418c:	d04b      	beq.n	8004226 <_malloc_r+0xea>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	4639      	mov	r1, r7
 8004192:	4630      	mov	r0, r6
 8004194:	eb04 0903 	add.w	r9, r4, r3
 8004198:	f000 fb5c 	bl	8004854 <_sbrk_r>
 800419c:	4581      	cmp	r9, r0
 800419e:	d142      	bne.n	8004226 <_malloc_r+0xea>
 80041a0:	6821      	ldr	r1, [r4, #0]
 80041a2:	1a6d      	subs	r5, r5, r1
 80041a4:	4629      	mov	r1, r5
 80041a6:	4630      	mov	r0, r6
 80041a8:	f7ff ffa6 	bl	80040f8 <sbrk_aligned>
 80041ac:	3001      	adds	r0, #1
 80041ae:	d03a      	beq.n	8004226 <_malloc_r+0xea>
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	442b      	add	r3, r5
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	bb62      	cbnz	r2, 8004218 <_malloc_r+0xdc>
 80041be:	f8c8 7000 	str.w	r7, [r8]
 80041c2:	e00f      	b.n	80041e4 <_malloc_r+0xa8>
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	1b52      	subs	r2, r2, r5
 80041c8:	d420      	bmi.n	800420c <_malloc_r+0xd0>
 80041ca:	2a0b      	cmp	r2, #11
 80041cc:	d917      	bls.n	80041fe <_malloc_r+0xc2>
 80041ce:	1961      	adds	r1, r4, r5
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	6025      	str	r5, [r4, #0]
 80041d4:	bf18      	it	ne
 80041d6:	6059      	strne	r1, [r3, #4]
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	bf08      	it	eq
 80041dc:	f8c8 1000 	streq.w	r1, [r8]
 80041e0:	5162      	str	r2, [r4, r5]
 80041e2:	604b      	str	r3, [r1, #4]
 80041e4:	4630      	mov	r0, r6
 80041e6:	f000 f82f 	bl	8004248 <__malloc_unlock>
 80041ea:	f104 000b 	add.w	r0, r4, #11
 80041ee:	1d23      	adds	r3, r4, #4
 80041f0:	f020 0007 	bic.w	r0, r0, #7
 80041f4:	1ac2      	subs	r2, r0, r3
 80041f6:	bf1c      	itt	ne
 80041f8:	1a1b      	subne	r3, r3, r0
 80041fa:	50a3      	strne	r3, [r4, r2]
 80041fc:	e7af      	b.n	800415e <_malloc_r+0x22>
 80041fe:	6862      	ldr	r2, [r4, #4]
 8004200:	42a3      	cmp	r3, r4
 8004202:	bf0c      	ite	eq
 8004204:	f8c8 2000 	streq.w	r2, [r8]
 8004208:	605a      	strne	r2, [r3, #4]
 800420a:	e7eb      	b.n	80041e4 <_malloc_r+0xa8>
 800420c:	4623      	mov	r3, r4
 800420e:	6864      	ldr	r4, [r4, #4]
 8004210:	e7ae      	b.n	8004170 <_malloc_r+0x34>
 8004212:	463c      	mov	r4, r7
 8004214:	687f      	ldr	r7, [r7, #4]
 8004216:	e7b6      	b.n	8004186 <_malloc_r+0x4a>
 8004218:	461a      	mov	r2, r3
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	42a3      	cmp	r3, r4
 800421e:	d1fb      	bne.n	8004218 <_malloc_r+0xdc>
 8004220:	2300      	movs	r3, #0
 8004222:	6053      	str	r3, [r2, #4]
 8004224:	e7de      	b.n	80041e4 <_malloc_r+0xa8>
 8004226:	230c      	movs	r3, #12
 8004228:	6033      	str	r3, [r6, #0]
 800422a:	4630      	mov	r0, r6
 800422c:	f000 f80c 	bl	8004248 <__malloc_unlock>
 8004230:	e794      	b.n	800415c <_malloc_r+0x20>
 8004232:	6005      	str	r5, [r0, #0]
 8004234:	e7d6      	b.n	80041e4 <_malloc_r+0xa8>
 8004236:	bf00      	nop
 8004238:	200006c0 	.word	0x200006c0

0800423c <__malloc_lock>:
 800423c:	4801      	ldr	r0, [pc, #4]	@ (8004244 <__malloc_lock+0x8>)
 800423e:	f7ff bf0f 	b.w	8004060 <__retarget_lock_acquire_recursive>
 8004242:	bf00      	nop
 8004244:	200006b8 	.word	0x200006b8

08004248 <__malloc_unlock>:
 8004248:	4801      	ldr	r0, [pc, #4]	@ (8004250 <__malloc_unlock+0x8>)
 800424a:	f7ff bf0a 	b.w	8004062 <__retarget_lock_release_recursive>
 800424e:	bf00      	nop
 8004250:	200006b8 	.word	0x200006b8

08004254 <__ssputs_r>:
 8004254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	688e      	ldr	r6, [r1, #8]
 800425a:	461f      	mov	r7, r3
 800425c:	42be      	cmp	r6, r7
 800425e:	680b      	ldr	r3, [r1, #0]
 8004260:	4682      	mov	sl, r0
 8004262:	460c      	mov	r4, r1
 8004264:	4690      	mov	r8, r2
 8004266:	d82d      	bhi.n	80042c4 <__ssputs_r+0x70>
 8004268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800426c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004270:	d026      	beq.n	80042c0 <__ssputs_r+0x6c>
 8004272:	6965      	ldr	r5, [r4, #20]
 8004274:	6909      	ldr	r1, [r1, #16]
 8004276:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800427a:	eba3 0901 	sub.w	r9, r3, r1
 800427e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004282:	1c7b      	adds	r3, r7, #1
 8004284:	444b      	add	r3, r9
 8004286:	106d      	asrs	r5, r5, #1
 8004288:	429d      	cmp	r5, r3
 800428a:	bf38      	it	cc
 800428c:	461d      	movcc	r5, r3
 800428e:	0553      	lsls	r3, r2, #21
 8004290:	d527      	bpl.n	80042e2 <__ssputs_r+0x8e>
 8004292:	4629      	mov	r1, r5
 8004294:	f7ff ff52 	bl	800413c <_malloc_r>
 8004298:	4606      	mov	r6, r0
 800429a:	b360      	cbz	r0, 80042f6 <__ssputs_r+0xa2>
 800429c:	6921      	ldr	r1, [r4, #16]
 800429e:	464a      	mov	r2, r9
 80042a0:	f000 fae8 	bl	8004874 <memcpy>
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ae:	81a3      	strh	r3, [r4, #12]
 80042b0:	6126      	str	r6, [r4, #16]
 80042b2:	6165      	str	r5, [r4, #20]
 80042b4:	444e      	add	r6, r9
 80042b6:	eba5 0509 	sub.w	r5, r5, r9
 80042ba:	6026      	str	r6, [r4, #0]
 80042bc:	60a5      	str	r5, [r4, #8]
 80042be:	463e      	mov	r6, r7
 80042c0:	42be      	cmp	r6, r7
 80042c2:	d900      	bls.n	80042c6 <__ssputs_r+0x72>
 80042c4:	463e      	mov	r6, r7
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	4632      	mov	r2, r6
 80042ca:	4641      	mov	r1, r8
 80042cc:	f000 faa8 	bl	8004820 <memmove>
 80042d0:	68a3      	ldr	r3, [r4, #8]
 80042d2:	1b9b      	subs	r3, r3, r6
 80042d4:	60a3      	str	r3, [r4, #8]
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	4433      	add	r3, r6
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	2000      	movs	r0, #0
 80042de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e2:	462a      	mov	r2, r5
 80042e4:	f000 fad4 	bl	8004890 <_realloc_r>
 80042e8:	4606      	mov	r6, r0
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d1e0      	bne.n	80042b0 <__ssputs_r+0x5c>
 80042ee:	6921      	ldr	r1, [r4, #16]
 80042f0:	4650      	mov	r0, sl
 80042f2:	f7ff feb7 	bl	8004064 <_free_r>
 80042f6:	230c      	movs	r3, #12
 80042f8:	f8ca 3000 	str.w	r3, [sl]
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004302:	81a3      	strh	r3, [r4, #12]
 8004304:	f04f 30ff 	mov.w	r0, #4294967295
 8004308:	e7e9      	b.n	80042de <__ssputs_r+0x8a>
	...

0800430c <_svfiprintf_r>:
 800430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004310:	4698      	mov	r8, r3
 8004312:	898b      	ldrh	r3, [r1, #12]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	b09d      	sub	sp, #116	@ 0x74
 8004318:	4607      	mov	r7, r0
 800431a:	460d      	mov	r5, r1
 800431c:	4614      	mov	r4, r2
 800431e:	d510      	bpl.n	8004342 <_svfiprintf_r+0x36>
 8004320:	690b      	ldr	r3, [r1, #16]
 8004322:	b973      	cbnz	r3, 8004342 <_svfiprintf_r+0x36>
 8004324:	2140      	movs	r1, #64	@ 0x40
 8004326:	f7ff ff09 	bl	800413c <_malloc_r>
 800432a:	6028      	str	r0, [r5, #0]
 800432c:	6128      	str	r0, [r5, #16]
 800432e:	b930      	cbnz	r0, 800433e <_svfiprintf_r+0x32>
 8004330:	230c      	movs	r3, #12
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	f04f 30ff 	mov.w	r0, #4294967295
 8004338:	b01d      	add	sp, #116	@ 0x74
 800433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433e:	2340      	movs	r3, #64	@ 0x40
 8004340:	616b      	str	r3, [r5, #20]
 8004342:	2300      	movs	r3, #0
 8004344:	9309      	str	r3, [sp, #36]	@ 0x24
 8004346:	2320      	movs	r3, #32
 8004348:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800434c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004350:	2330      	movs	r3, #48	@ 0x30
 8004352:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80044f0 <_svfiprintf_r+0x1e4>
 8004356:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800435a:	f04f 0901 	mov.w	r9, #1
 800435e:	4623      	mov	r3, r4
 8004360:	469a      	mov	sl, r3
 8004362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004366:	b10a      	cbz	r2, 800436c <_svfiprintf_r+0x60>
 8004368:	2a25      	cmp	r2, #37	@ 0x25
 800436a:	d1f9      	bne.n	8004360 <_svfiprintf_r+0x54>
 800436c:	ebba 0b04 	subs.w	fp, sl, r4
 8004370:	d00b      	beq.n	800438a <_svfiprintf_r+0x7e>
 8004372:	465b      	mov	r3, fp
 8004374:	4622      	mov	r2, r4
 8004376:	4629      	mov	r1, r5
 8004378:	4638      	mov	r0, r7
 800437a:	f7ff ff6b 	bl	8004254 <__ssputs_r>
 800437e:	3001      	adds	r0, #1
 8004380:	f000 80a7 	beq.w	80044d2 <_svfiprintf_r+0x1c6>
 8004384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004386:	445a      	add	r2, fp
 8004388:	9209      	str	r2, [sp, #36]	@ 0x24
 800438a:	f89a 3000 	ldrb.w	r3, [sl]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 809f 	beq.w	80044d2 <_svfiprintf_r+0x1c6>
 8004394:	2300      	movs	r3, #0
 8004396:	f04f 32ff 	mov.w	r2, #4294967295
 800439a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800439e:	f10a 0a01 	add.w	sl, sl, #1
 80043a2:	9304      	str	r3, [sp, #16]
 80043a4:	9307      	str	r3, [sp, #28]
 80043a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80043ac:	4654      	mov	r4, sl
 80043ae:	2205      	movs	r2, #5
 80043b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b4:	484e      	ldr	r0, [pc, #312]	@ (80044f0 <_svfiprintf_r+0x1e4>)
 80043b6:	f7fb ff2b 	bl	8000210 <memchr>
 80043ba:	9a04      	ldr	r2, [sp, #16]
 80043bc:	b9d8      	cbnz	r0, 80043f6 <_svfiprintf_r+0xea>
 80043be:	06d0      	lsls	r0, r2, #27
 80043c0:	bf44      	itt	mi
 80043c2:	2320      	movmi	r3, #32
 80043c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043c8:	0711      	lsls	r1, r2, #28
 80043ca:	bf44      	itt	mi
 80043cc:	232b      	movmi	r3, #43	@ 0x2b
 80043ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043d2:	f89a 3000 	ldrb.w	r3, [sl]
 80043d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80043d8:	d015      	beq.n	8004406 <_svfiprintf_r+0xfa>
 80043da:	9a07      	ldr	r2, [sp, #28]
 80043dc:	4654      	mov	r4, sl
 80043de:	2000      	movs	r0, #0
 80043e0:	f04f 0c0a 	mov.w	ip, #10
 80043e4:	4621      	mov	r1, r4
 80043e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043ea:	3b30      	subs	r3, #48	@ 0x30
 80043ec:	2b09      	cmp	r3, #9
 80043ee:	d94b      	bls.n	8004488 <_svfiprintf_r+0x17c>
 80043f0:	b1b0      	cbz	r0, 8004420 <_svfiprintf_r+0x114>
 80043f2:	9207      	str	r2, [sp, #28]
 80043f4:	e014      	b.n	8004420 <_svfiprintf_r+0x114>
 80043f6:	eba0 0308 	sub.w	r3, r0, r8
 80043fa:	fa09 f303 	lsl.w	r3, r9, r3
 80043fe:	4313      	orrs	r3, r2
 8004400:	9304      	str	r3, [sp, #16]
 8004402:	46a2      	mov	sl, r4
 8004404:	e7d2      	b.n	80043ac <_svfiprintf_r+0xa0>
 8004406:	9b03      	ldr	r3, [sp, #12]
 8004408:	1d19      	adds	r1, r3, #4
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	9103      	str	r1, [sp, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	bfbb      	ittet	lt
 8004412:	425b      	neglt	r3, r3
 8004414:	f042 0202 	orrlt.w	r2, r2, #2
 8004418:	9307      	strge	r3, [sp, #28]
 800441a:	9307      	strlt	r3, [sp, #28]
 800441c:	bfb8      	it	lt
 800441e:	9204      	strlt	r2, [sp, #16]
 8004420:	7823      	ldrb	r3, [r4, #0]
 8004422:	2b2e      	cmp	r3, #46	@ 0x2e
 8004424:	d10a      	bne.n	800443c <_svfiprintf_r+0x130>
 8004426:	7863      	ldrb	r3, [r4, #1]
 8004428:	2b2a      	cmp	r3, #42	@ 0x2a
 800442a:	d132      	bne.n	8004492 <_svfiprintf_r+0x186>
 800442c:	9b03      	ldr	r3, [sp, #12]
 800442e:	1d1a      	adds	r2, r3, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	9203      	str	r2, [sp, #12]
 8004434:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004438:	3402      	adds	r4, #2
 800443a:	9305      	str	r3, [sp, #20]
 800443c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004500 <_svfiprintf_r+0x1f4>
 8004440:	7821      	ldrb	r1, [r4, #0]
 8004442:	2203      	movs	r2, #3
 8004444:	4650      	mov	r0, sl
 8004446:	f7fb fee3 	bl	8000210 <memchr>
 800444a:	b138      	cbz	r0, 800445c <_svfiprintf_r+0x150>
 800444c:	9b04      	ldr	r3, [sp, #16]
 800444e:	eba0 000a 	sub.w	r0, r0, sl
 8004452:	2240      	movs	r2, #64	@ 0x40
 8004454:	4082      	lsls	r2, r0
 8004456:	4313      	orrs	r3, r2
 8004458:	3401      	adds	r4, #1
 800445a:	9304      	str	r3, [sp, #16]
 800445c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004460:	4824      	ldr	r0, [pc, #144]	@ (80044f4 <_svfiprintf_r+0x1e8>)
 8004462:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004466:	2206      	movs	r2, #6
 8004468:	f7fb fed2 	bl	8000210 <memchr>
 800446c:	2800      	cmp	r0, #0
 800446e:	d036      	beq.n	80044de <_svfiprintf_r+0x1d2>
 8004470:	4b21      	ldr	r3, [pc, #132]	@ (80044f8 <_svfiprintf_r+0x1ec>)
 8004472:	bb1b      	cbnz	r3, 80044bc <_svfiprintf_r+0x1b0>
 8004474:	9b03      	ldr	r3, [sp, #12]
 8004476:	3307      	adds	r3, #7
 8004478:	f023 0307 	bic.w	r3, r3, #7
 800447c:	3308      	adds	r3, #8
 800447e:	9303      	str	r3, [sp, #12]
 8004480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004482:	4433      	add	r3, r6
 8004484:	9309      	str	r3, [sp, #36]	@ 0x24
 8004486:	e76a      	b.n	800435e <_svfiprintf_r+0x52>
 8004488:	fb0c 3202 	mla	r2, ip, r2, r3
 800448c:	460c      	mov	r4, r1
 800448e:	2001      	movs	r0, #1
 8004490:	e7a8      	b.n	80043e4 <_svfiprintf_r+0xd8>
 8004492:	2300      	movs	r3, #0
 8004494:	3401      	adds	r4, #1
 8004496:	9305      	str	r3, [sp, #20]
 8004498:	4619      	mov	r1, r3
 800449a:	f04f 0c0a 	mov.w	ip, #10
 800449e:	4620      	mov	r0, r4
 80044a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044a4:	3a30      	subs	r2, #48	@ 0x30
 80044a6:	2a09      	cmp	r2, #9
 80044a8:	d903      	bls.n	80044b2 <_svfiprintf_r+0x1a6>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0c6      	beq.n	800443c <_svfiprintf_r+0x130>
 80044ae:	9105      	str	r1, [sp, #20]
 80044b0:	e7c4      	b.n	800443c <_svfiprintf_r+0x130>
 80044b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80044b6:	4604      	mov	r4, r0
 80044b8:	2301      	movs	r3, #1
 80044ba:	e7f0      	b.n	800449e <_svfiprintf_r+0x192>
 80044bc:	ab03      	add	r3, sp, #12
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	462a      	mov	r2, r5
 80044c2:	4b0e      	ldr	r3, [pc, #56]	@ (80044fc <_svfiprintf_r+0x1f0>)
 80044c4:	a904      	add	r1, sp, #16
 80044c6:	4638      	mov	r0, r7
 80044c8:	f3af 8000 	nop.w
 80044cc:	1c42      	adds	r2, r0, #1
 80044ce:	4606      	mov	r6, r0
 80044d0:	d1d6      	bne.n	8004480 <_svfiprintf_r+0x174>
 80044d2:	89ab      	ldrh	r3, [r5, #12]
 80044d4:	065b      	lsls	r3, r3, #25
 80044d6:	f53f af2d 	bmi.w	8004334 <_svfiprintf_r+0x28>
 80044da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044dc:	e72c      	b.n	8004338 <_svfiprintf_r+0x2c>
 80044de:	ab03      	add	r3, sp, #12
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	462a      	mov	r2, r5
 80044e4:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <_svfiprintf_r+0x1f0>)
 80044e6:	a904      	add	r1, sp, #16
 80044e8:	4638      	mov	r0, r7
 80044ea:	f000 f879 	bl	80045e0 <_printf_i>
 80044ee:	e7ed      	b.n	80044cc <_svfiprintf_r+0x1c0>
 80044f0:	08004a50 	.word	0x08004a50
 80044f4:	08004a5a 	.word	0x08004a5a
 80044f8:	00000000 	.word	0x00000000
 80044fc:	08004255 	.word	0x08004255
 8004500:	08004a56 	.word	0x08004a56

08004504 <_printf_common>:
 8004504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	4616      	mov	r6, r2
 800450a:	4698      	mov	r8, r3
 800450c:	688a      	ldr	r2, [r1, #8]
 800450e:	690b      	ldr	r3, [r1, #16]
 8004510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004514:	4293      	cmp	r3, r2
 8004516:	bfb8      	it	lt
 8004518:	4613      	movlt	r3, r2
 800451a:	6033      	str	r3, [r6, #0]
 800451c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004520:	4607      	mov	r7, r0
 8004522:	460c      	mov	r4, r1
 8004524:	b10a      	cbz	r2, 800452a <_printf_common+0x26>
 8004526:	3301      	adds	r3, #1
 8004528:	6033      	str	r3, [r6, #0]
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	0699      	lsls	r1, r3, #26
 800452e:	bf42      	ittt	mi
 8004530:	6833      	ldrmi	r3, [r6, #0]
 8004532:	3302      	addmi	r3, #2
 8004534:	6033      	strmi	r3, [r6, #0]
 8004536:	6825      	ldr	r5, [r4, #0]
 8004538:	f015 0506 	ands.w	r5, r5, #6
 800453c:	d106      	bne.n	800454c <_printf_common+0x48>
 800453e:	f104 0a19 	add.w	sl, r4, #25
 8004542:	68e3      	ldr	r3, [r4, #12]
 8004544:	6832      	ldr	r2, [r6, #0]
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	42ab      	cmp	r3, r5
 800454a:	dc26      	bgt.n	800459a <_printf_common+0x96>
 800454c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004550:	6822      	ldr	r2, [r4, #0]
 8004552:	3b00      	subs	r3, #0
 8004554:	bf18      	it	ne
 8004556:	2301      	movne	r3, #1
 8004558:	0692      	lsls	r2, r2, #26
 800455a:	d42b      	bmi.n	80045b4 <_printf_common+0xb0>
 800455c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004560:	4641      	mov	r1, r8
 8004562:	4638      	mov	r0, r7
 8004564:	47c8      	blx	r9
 8004566:	3001      	adds	r0, #1
 8004568:	d01e      	beq.n	80045a8 <_printf_common+0xa4>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	6922      	ldr	r2, [r4, #16]
 800456e:	f003 0306 	and.w	r3, r3, #6
 8004572:	2b04      	cmp	r3, #4
 8004574:	bf02      	ittt	eq
 8004576:	68e5      	ldreq	r5, [r4, #12]
 8004578:	6833      	ldreq	r3, [r6, #0]
 800457a:	1aed      	subeq	r5, r5, r3
 800457c:	68a3      	ldr	r3, [r4, #8]
 800457e:	bf0c      	ite	eq
 8004580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004584:	2500      	movne	r5, #0
 8004586:	4293      	cmp	r3, r2
 8004588:	bfc4      	itt	gt
 800458a:	1a9b      	subgt	r3, r3, r2
 800458c:	18ed      	addgt	r5, r5, r3
 800458e:	2600      	movs	r6, #0
 8004590:	341a      	adds	r4, #26
 8004592:	42b5      	cmp	r5, r6
 8004594:	d11a      	bne.n	80045cc <_printf_common+0xc8>
 8004596:	2000      	movs	r0, #0
 8004598:	e008      	b.n	80045ac <_printf_common+0xa8>
 800459a:	2301      	movs	r3, #1
 800459c:	4652      	mov	r2, sl
 800459e:	4641      	mov	r1, r8
 80045a0:	4638      	mov	r0, r7
 80045a2:	47c8      	blx	r9
 80045a4:	3001      	adds	r0, #1
 80045a6:	d103      	bne.n	80045b0 <_printf_common+0xac>
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b0:	3501      	adds	r5, #1
 80045b2:	e7c6      	b.n	8004542 <_printf_common+0x3e>
 80045b4:	18e1      	adds	r1, r4, r3
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	2030      	movs	r0, #48	@ 0x30
 80045ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045be:	4422      	add	r2, r4
 80045c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045c8:	3302      	adds	r3, #2
 80045ca:	e7c7      	b.n	800455c <_printf_common+0x58>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4622      	mov	r2, r4
 80045d0:	4641      	mov	r1, r8
 80045d2:	4638      	mov	r0, r7
 80045d4:	47c8      	blx	r9
 80045d6:	3001      	adds	r0, #1
 80045d8:	d0e6      	beq.n	80045a8 <_printf_common+0xa4>
 80045da:	3601      	adds	r6, #1
 80045dc:	e7d9      	b.n	8004592 <_printf_common+0x8e>
	...

080045e0 <_printf_i>:
 80045e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e4:	7e0f      	ldrb	r7, [r1, #24]
 80045e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045e8:	2f78      	cmp	r7, #120	@ 0x78
 80045ea:	4691      	mov	r9, r2
 80045ec:	4680      	mov	r8, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	469a      	mov	sl, r3
 80045f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045f6:	d807      	bhi.n	8004608 <_printf_i+0x28>
 80045f8:	2f62      	cmp	r7, #98	@ 0x62
 80045fa:	d80a      	bhi.n	8004612 <_printf_i+0x32>
 80045fc:	2f00      	cmp	r7, #0
 80045fe:	f000 80d2 	beq.w	80047a6 <_printf_i+0x1c6>
 8004602:	2f58      	cmp	r7, #88	@ 0x58
 8004604:	f000 80b9 	beq.w	800477a <_printf_i+0x19a>
 8004608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800460c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004610:	e03a      	b.n	8004688 <_printf_i+0xa8>
 8004612:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004616:	2b15      	cmp	r3, #21
 8004618:	d8f6      	bhi.n	8004608 <_printf_i+0x28>
 800461a:	a101      	add	r1, pc, #4	@ (adr r1, 8004620 <_printf_i+0x40>)
 800461c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004620:	08004679 	.word	0x08004679
 8004624:	0800468d 	.word	0x0800468d
 8004628:	08004609 	.word	0x08004609
 800462c:	08004609 	.word	0x08004609
 8004630:	08004609 	.word	0x08004609
 8004634:	08004609 	.word	0x08004609
 8004638:	0800468d 	.word	0x0800468d
 800463c:	08004609 	.word	0x08004609
 8004640:	08004609 	.word	0x08004609
 8004644:	08004609 	.word	0x08004609
 8004648:	08004609 	.word	0x08004609
 800464c:	0800478d 	.word	0x0800478d
 8004650:	080046b7 	.word	0x080046b7
 8004654:	08004747 	.word	0x08004747
 8004658:	08004609 	.word	0x08004609
 800465c:	08004609 	.word	0x08004609
 8004660:	080047af 	.word	0x080047af
 8004664:	08004609 	.word	0x08004609
 8004668:	080046b7 	.word	0x080046b7
 800466c:	08004609 	.word	0x08004609
 8004670:	08004609 	.word	0x08004609
 8004674:	0800474f 	.word	0x0800474f
 8004678:	6833      	ldr	r3, [r6, #0]
 800467a:	1d1a      	adds	r2, r3, #4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6032      	str	r2, [r6, #0]
 8004680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004684:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004688:	2301      	movs	r3, #1
 800468a:	e09d      	b.n	80047c8 <_printf_i+0x1e8>
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	6820      	ldr	r0, [r4, #0]
 8004690:	1d19      	adds	r1, r3, #4
 8004692:	6031      	str	r1, [r6, #0]
 8004694:	0606      	lsls	r6, r0, #24
 8004696:	d501      	bpl.n	800469c <_printf_i+0xbc>
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	e003      	b.n	80046a4 <_printf_i+0xc4>
 800469c:	0645      	lsls	r5, r0, #25
 800469e:	d5fb      	bpl.n	8004698 <_printf_i+0xb8>
 80046a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	da03      	bge.n	80046b0 <_printf_i+0xd0>
 80046a8:	232d      	movs	r3, #45	@ 0x2d
 80046aa:	426d      	negs	r5, r5
 80046ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046b0:	4859      	ldr	r0, [pc, #356]	@ (8004818 <_printf_i+0x238>)
 80046b2:	230a      	movs	r3, #10
 80046b4:	e011      	b.n	80046da <_printf_i+0xfa>
 80046b6:	6821      	ldr	r1, [r4, #0]
 80046b8:	6833      	ldr	r3, [r6, #0]
 80046ba:	0608      	lsls	r0, r1, #24
 80046bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80046c0:	d402      	bmi.n	80046c8 <_printf_i+0xe8>
 80046c2:	0649      	lsls	r1, r1, #25
 80046c4:	bf48      	it	mi
 80046c6:	b2ad      	uxthmi	r5, r5
 80046c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80046ca:	4853      	ldr	r0, [pc, #332]	@ (8004818 <_printf_i+0x238>)
 80046cc:	6033      	str	r3, [r6, #0]
 80046ce:	bf14      	ite	ne
 80046d0:	230a      	movne	r3, #10
 80046d2:	2308      	moveq	r3, #8
 80046d4:	2100      	movs	r1, #0
 80046d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046da:	6866      	ldr	r6, [r4, #4]
 80046dc:	60a6      	str	r6, [r4, #8]
 80046de:	2e00      	cmp	r6, #0
 80046e0:	bfa2      	ittt	ge
 80046e2:	6821      	ldrge	r1, [r4, #0]
 80046e4:	f021 0104 	bicge.w	r1, r1, #4
 80046e8:	6021      	strge	r1, [r4, #0]
 80046ea:	b90d      	cbnz	r5, 80046f0 <_printf_i+0x110>
 80046ec:	2e00      	cmp	r6, #0
 80046ee:	d04b      	beq.n	8004788 <_printf_i+0x1a8>
 80046f0:	4616      	mov	r6, r2
 80046f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80046f6:	fb03 5711 	mls	r7, r3, r1, r5
 80046fa:	5dc7      	ldrb	r7, [r0, r7]
 80046fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004700:	462f      	mov	r7, r5
 8004702:	42bb      	cmp	r3, r7
 8004704:	460d      	mov	r5, r1
 8004706:	d9f4      	bls.n	80046f2 <_printf_i+0x112>
 8004708:	2b08      	cmp	r3, #8
 800470a:	d10b      	bne.n	8004724 <_printf_i+0x144>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	07df      	lsls	r7, r3, #31
 8004710:	d508      	bpl.n	8004724 <_printf_i+0x144>
 8004712:	6923      	ldr	r3, [r4, #16]
 8004714:	6861      	ldr	r1, [r4, #4]
 8004716:	4299      	cmp	r1, r3
 8004718:	bfde      	ittt	le
 800471a:	2330      	movle	r3, #48	@ 0x30
 800471c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004720:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004724:	1b92      	subs	r2, r2, r6
 8004726:	6122      	str	r2, [r4, #16]
 8004728:	f8cd a000 	str.w	sl, [sp]
 800472c:	464b      	mov	r3, r9
 800472e:	aa03      	add	r2, sp, #12
 8004730:	4621      	mov	r1, r4
 8004732:	4640      	mov	r0, r8
 8004734:	f7ff fee6 	bl	8004504 <_printf_common>
 8004738:	3001      	adds	r0, #1
 800473a:	d14a      	bne.n	80047d2 <_printf_i+0x1f2>
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	b004      	add	sp, #16
 8004742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	f043 0320 	orr.w	r3, r3, #32
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	4833      	ldr	r0, [pc, #204]	@ (800481c <_printf_i+0x23c>)
 8004750:	2778      	movs	r7, #120	@ 0x78
 8004752:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	6831      	ldr	r1, [r6, #0]
 800475a:	061f      	lsls	r7, r3, #24
 800475c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004760:	d402      	bmi.n	8004768 <_printf_i+0x188>
 8004762:	065f      	lsls	r7, r3, #25
 8004764:	bf48      	it	mi
 8004766:	b2ad      	uxthmi	r5, r5
 8004768:	6031      	str	r1, [r6, #0]
 800476a:	07d9      	lsls	r1, r3, #31
 800476c:	bf44      	itt	mi
 800476e:	f043 0320 	orrmi.w	r3, r3, #32
 8004772:	6023      	strmi	r3, [r4, #0]
 8004774:	b11d      	cbz	r5, 800477e <_printf_i+0x19e>
 8004776:	2310      	movs	r3, #16
 8004778:	e7ac      	b.n	80046d4 <_printf_i+0xf4>
 800477a:	4827      	ldr	r0, [pc, #156]	@ (8004818 <_printf_i+0x238>)
 800477c:	e7e9      	b.n	8004752 <_printf_i+0x172>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	f023 0320 	bic.w	r3, r3, #32
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	e7f6      	b.n	8004776 <_printf_i+0x196>
 8004788:	4616      	mov	r6, r2
 800478a:	e7bd      	b.n	8004708 <_printf_i+0x128>
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	6825      	ldr	r5, [r4, #0]
 8004790:	6961      	ldr	r1, [r4, #20]
 8004792:	1d18      	adds	r0, r3, #4
 8004794:	6030      	str	r0, [r6, #0]
 8004796:	062e      	lsls	r6, r5, #24
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	d501      	bpl.n	80047a0 <_printf_i+0x1c0>
 800479c:	6019      	str	r1, [r3, #0]
 800479e:	e002      	b.n	80047a6 <_printf_i+0x1c6>
 80047a0:	0668      	lsls	r0, r5, #25
 80047a2:	d5fb      	bpl.n	800479c <_printf_i+0x1bc>
 80047a4:	8019      	strh	r1, [r3, #0]
 80047a6:	2300      	movs	r3, #0
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	4616      	mov	r6, r2
 80047ac:	e7bc      	b.n	8004728 <_printf_i+0x148>
 80047ae:	6833      	ldr	r3, [r6, #0]
 80047b0:	1d1a      	adds	r2, r3, #4
 80047b2:	6032      	str	r2, [r6, #0]
 80047b4:	681e      	ldr	r6, [r3, #0]
 80047b6:	6862      	ldr	r2, [r4, #4]
 80047b8:	2100      	movs	r1, #0
 80047ba:	4630      	mov	r0, r6
 80047bc:	f7fb fd28 	bl	8000210 <memchr>
 80047c0:	b108      	cbz	r0, 80047c6 <_printf_i+0x1e6>
 80047c2:	1b80      	subs	r0, r0, r6
 80047c4:	6060      	str	r0, [r4, #4]
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	2300      	movs	r3, #0
 80047cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047d0:	e7aa      	b.n	8004728 <_printf_i+0x148>
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	4632      	mov	r2, r6
 80047d6:	4649      	mov	r1, r9
 80047d8:	4640      	mov	r0, r8
 80047da:	47d0      	blx	sl
 80047dc:	3001      	adds	r0, #1
 80047de:	d0ad      	beq.n	800473c <_printf_i+0x15c>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	079b      	lsls	r3, r3, #30
 80047e4:	d413      	bmi.n	800480e <_printf_i+0x22e>
 80047e6:	68e0      	ldr	r0, [r4, #12]
 80047e8:	9b03      	ldr	r3, [sp, #12]
 80047ea:	4298      	cmp	r0, r3
 80047ec:	bfb8      	it	lt
 80047ee:	4618      	movlt	r0, r3
 80047f0:	e7a6      	b.n	8004740 <_printf_i+0x160>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4632      	mov	r2, r6
 80047f6:	4649      	mov	r1, r9
 80047f8:	4640      	mov	r0, r8
 80047fa:	47d0      	blx	sl
 80047fc:	3001      	adds	r0, #1
 80047fe:	d09d      	beq.n	800473c <_printf_i+0x15c>
 8004800:	3501      	adds	r5, #1
 8004802:	68e3      	ldr	r3, [r4, #12]
 8004804:	9903      	ldr	r1, [sp, #12]
 8004806:	1a5b      	subs	r3, r3, r1
 8004808:	42ab      	cmp	r3, r5
 800480a:	dcf2      	bgt.n	80047f2 <_printf_i+0x212>
 800480c:	e7eb      	b.n	80047e6 <_printf_i+0x206>
 800480e:	2500      	movs	r5, #0
 8004810:	f104 0619 	add.w	r6, r4, #25
 8004814:	e7f5      	b.n	8004802 <_printf_i+0x222>
 8004816:	bf00      	nop
 8004818:	08004a61 	.word	0x08004a61
 800481c:	08004a72 	.word	0x08004a72

08004820 <memmove>:
 8004820:	4288      	cmp	r0, r1
 8004822:	b510      	push	{r4, lr}
 8004824:	eb01 0402 	add.w	r4, r1, r2
 8004828:	d902      	bls.n	8004830 <memmove+0x10>
 800482a:	4284      	cmp	r4, r0
 800482c:	4623      	mov	r3, r4
 800482e:	d807      	bhi.n	8004840 <memmove+0x20>
 8004830:	1e43      	subs	r3, r0, #1
 8004832:	42a1      	cmp	r1, r4
 8004834:	d008      	beq.n	8004848 <memmove+0x28>
 8004836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800483a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800483e:	e7f8      	b.n	8004832 <memmove+0x12>
 8004840:	4402      	add	r2, r0
 8004842:	4601      	mov	r1, r0
 8004844:	428a      	cmp	r2, r1
 8004846:	d100      	bne.n	800484a <memmove+0x2a>
 8004848:	bd10      	pop	{r4, pc}
 800484a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800484e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004852:	e7f7      	b.n	8004844 <memmove+0x24>

08004854 <_sbrk_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4d06      	ldr	r5, [pc, #24]	@ (8004870 <_sbrk_r+0x1c>)
 8004858:	2300      	movs	r3, #0
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	602b      	str	r3, [r5, #0]
 8004860:	f7fc fc08 	bl	8001074 <_sbrk>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_sbrk_r+0x1a>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_sbrk_r+0x1a>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	200006b4 	.word	0x200006b4

08004874 <memcpy>:
 8004874:	440a      	add	r2, r1
 8004876:	4291      	cmp	r1, r2
 8004878:	f100 33ff 	add.w	r3, r0, #4294967295
 800487c:	d100      	bne.n	8004880 <memcpy+0xc>
 800487e:	4770      	bx	lr
 8004880:	b510      	push	{r4, lr}
 8004882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800488a:	4291      	cmp	r1, r2
 800488c:	d1f9      	bne.n	8004882 <memcpy+0xe>
 800488e:	bd10      	pop	{r4, pc}

08004890 <_realloc_r>:
 8004890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004894:	4680      	mov	r8, r0
 8004896:	4615      	mov	r5, r2
 8004898:	460c      	mov	r4, r1
 800489a:	b921      	cbnz	r1, 80048a6 <_realloc_r+0x16>
 800489c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048a0:	4611      	mov	r1, r2
 80048a2:	f7ff bc4b 	b.w	800413c <_malloc_r>
 80048a6:	b92a      	cbnz	r2, 80048b4 <_realloc_r+0x24>
 80048a8:	f7ff fbdc 	bl	8004064 <_free_r>
 80048ac:	2400      	movs	r4, #0
 80048ae:	4620      	mov	r0, r4
 80048b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b4:	f000 f81a 	bl	80048ec <_malloc_usable_size_r>
 80048b8:	4285      	cmp	r5, r0
 80048ba:	4606      	mov	r6, r0
 80048bc:	d802      	bhi.n	80048c4 <_realloc_r+0x34>
 80048be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80048c2:	d8f4      	bhi.n	80048ae <_realloc_r+0x1e>
 80048c4:	4629      	mov	r1, r5
 80048c6:	4640      	mov	r0, r8
 80048c8:	f7ff fc38 	bl	800413c <_malloc_r>
 80048cc:	4607      	mov	r7, r0
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d0ec      	beq.n	80048ac <_realloc_r+0x1c>
 80048d2:	42b5      	cmp	r5, r6
 80048d4:	462a      	mov	r2, r5
 80048d6:	4621      	mov	r1, r4
 80048d8:	bf28      	it	cs
 80048da:	4632      	movcs	r2, r6
 80048dc:	f7ff ffca 	bl	8004874 <memcpy>
 80048e0:	4621      	mov	r1, r4
 80048e2:	4640      	mov	r0, r8
 80048e4:	f7ff fbbe 	bl	8004064 <_free_r>
 80048e8:	463c      	mov	r4, r7
 80048ea:	e7e0      	b.n	80048ae <_realloc_r+0x1e>

080048ec <_malloc_usable_size_r>:
 80048ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f0:	1f18      	subs	r0, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bfbc      	itt	lt
 80048f6:	580b      	ldrlt	r3, [r1, r0]
 80048f8:	18c0      	addlt	r0, r0, r3
 80048fa:	4770      	bx	lr

080048fc <_init>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr

08004908 <_fini>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr
